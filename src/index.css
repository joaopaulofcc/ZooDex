/* Caminho: src/index.css */

/* ===================================================================================
   ARQUIVO: index.css
   Ol√°, futuro(a) Mestre Jedi do CSS!  Padawan, bem-vindo(a) ao `index.css`!
   Este arquivo √© como o "Manual de Estilo Universal" ou as "Leis Fundamentais do Design"
   para TODA a sua aplica√ß√£o ZooDex. Pense nele como o alicerce de um pr√©dio:
   ele define as regras b√°sicas de apar√™ncia que todos os outros "andares" (componentes)
   v√£o seguir, a menos que um andar espec√≠fico tenha uma regra muito particular.

   POR QUE ESTE ARQUIVO √â T√ÉO IMPORTANTE?
   Aqui √© o lugar ideal para:

   1. ‚ú® DEFINIR VARI√ÅVEIS CSS GLOBAIS (Custom Properties) no `:root` ‚ú®
      Imagine que voc√™ tem uma paleta de cores para o ZooDex (nosso verde, nosso laranja).
      Em vez de repetir os c√≥digos dessas cores (ex: `#2e7d32`) em dezenas de lugares
      diferentes, voc√™ cria uma "gavetinha" com um nome f√°cil (ex: `--cor-principal-verde`)
      e guarda a cor l√°. Depois, sempre que precisar dessa cor, voc√™ s√≥ diz: "pegue da
      gavetinha `--cor-principal-verde`". Se um dia o chefe pedir para mudar o verde para
      um tom um pouquinho diferente, voc√™ s√≥ muda na gavetinha, e TODO o site atualiza!
      Isso se chama DRY (Don't Repeat Yourself - N√£o se Repita) e torna a manuten√ß√£o
      um sonho!

   2. üßº APLICAR "RESETS" OU "NORMALIZA√á√ïES" DE CSS (Opcional, mas boa pr√°tica) üßº
      Cada navegador (Chrome, Firefox, Safari, etc.) tem suas teimosias e aplica alguns
      estilos padr√£o bem b√°sicos aos elementos HTML (tipo uma margem aqui, um tamanho de
      fonte ali). Um "CSS Reset" √© como dar um "reset de f√°brica": ele tira QUASE TODOS
      esses estilos padr√£o, para voc√™ come√ßar do zero, com total controle.
      Uma "Normalize CSS" √© mais gentil: ela n√£o tira tudo, mas tenta fazer com que os
      elementos se comportem de forma MAIS CONSISTENTE entre os diferentes navegadores,
      corrigindo algumas dessas teimosias.
      (Neste arquivo, faremos um mini-reset tirando a margem do `<body>` e aplicando
      `box-sizing: border-box;` em tudo).

   3. üé® DEFINIR ESTILOS BASE PARA ELEMENTOS HTML COMUNS üé®
      Aqui podemos dizer como queremos que o `<body>` da p√°gina se pare√ßa, qual a fonte
      padr√£o, a cor do texto, etc. Tamb√©m podemos definir estilos b√°sicos para t√≠tulos
      (`<h1>` a `<h6>`), par√°grafos (`<p>`), links (`<a>`), se quisermos um visual
      padr√£o em toda a aplica√ß√£o.

   COMO ELE SE RELACIONA COM OS ARQUIVOS `.module.css` DOS SEUS COMPONENTES?
   - `index.css` (este arquivo): √â o CHEF√ÉO GLOBAL. Seus estilos podem afetar tudo.
   - Arquivos `.module.css` (ex: `Header.module.css`, `AnimalCard.module.css`):
     S√£o os "estilos particulares" de cada componente. Eles usam uma m√°gica chamada
     CSS Modules, que d√° nomes secretos e √∫nicos para as classes CSS (ex: `.titulo` no
     `Header.module.css` vira algo como `Header_titulo__XyZ123`).
     Isso √© INCR√çVEL porque evita que um estilo `.titulo` do Header afete um `.titulo`
     do Footer, por exemplo. Cada um no seu quadrado!
     MAS, os estilos dos `.module.css` ainda podem HERDAR coisas do `index.css`
     (como a `font-family` definida no `body` ou as vari√°veis CSS do `:root`).

   Preparado(a) para desvendar os segredos deste arquivo? Vamos l√°! üïµÔ∏è‚Äç‚ôÄÔ∏èüöÄ
   =================================================================================== */

/* --- DEFINI√á√ÉO DE VARI√ÅVEIS CSS GLOBAIS (:root) --- */
/*
  ALUNOS, ESTA √â A SE√á√ÉO M√ÅGICA DAS GAVETINHAS! üßô‚Äç‚ôÇÔ∏è‚ú®
  O seletor `:root` √© super especial. Ele aponta para o elemento mais alto do seu
  documento HTML, que √© a tag `<html>`. √â aqui que guardamos nossas "ferramentas
  de pintura" globais: as Vari√°veis CSS (ou "Custom Properties").

  COMO FUNCIONAM?
  - Nome da Vari√°vel: Sempre come√ßa com DOIS H√çFENS, tipo `--nome-da-minha-variavel`.
  - Definir o Valor: Voc√™ diz `nome-da-variavel: valor;` (ex: `--cor-do-ceu: azul;`).
  - Usar a Vari√°vel: Em qualquer outro lugar do seu CSS, voc√™ usa `var(--nome-da-minha-variavel)`.
    Exemplo: `h1 { color: var(--cor-do-ceu); }`

  POR QUE ISSO √â T√ÉO LEGAL?
  1. CONSIST√äNCIA TOTAL: Sua paleta de cores, suas fontes, seus espa√ßamentos ficam
                       todos organizadinhos aqui. Todo o site vai usar as mesmas "tintas".
  2. MANUTEN√á√ÉO DE MESTRE: Se o cliente pedir "Pode deixar esse verde um pouco mais escuro?",
                          voc√™ n√£o precisa ca√ßar em 20 arquivos CSS. Muda S√ì AQUI no `:root`,
                          e *BUM!* Todo o site atualiza. √â quase como ter superpoderes!
  3. TEMAS? F√ÅCIL!: Quer um tema escuro? √â s√≥ criar um conjunto de vari√°veis para o tema escuro
                   e aplic√°-las (geralmente mudando as vari√°veis no `:root` com JavaScript
                   ou com uma classe no `body`).
  4. C√ìDIGO QUE FALA: Usar `background-color: var(--cor-de-fundo-do-alerta);` √© muito
                     mais f√°cil de entender do que `background-color: #FFEEBA;`.
                     Seu "eu do futuro" (e outros colegas devs) v√£o te agradecer!
*/
:root {
  /* -- SE√á√ÉO DE TIPOGRAFIA (NOSSAS LETRINHAS!) -- */
  /* Aqui definimos as "fam√≠lias de fontes" que vamos usar.
     √â como escolher o tipo de caneta para escrever.
     A ordem √© importante: o navegador tenta a primeira, se n√£o achar, tenta a segunda, e assim por diante.
     `sans-serif` no final √© o "plano B universal": uma fonte sem serifa padr√£o do sistema do usu√°rio. */
  --font-primary: "Nunito", Arial, sans-serif; /* Fonte principal. Usamos para t√≠tulos, destaques,
                                                 coisas que precisam chamar a aten√ß√£o. "Nunito" √© a nossa estrela!
                                                 Arial e sans-serif s√£o os "dubl√™s" caso Nunito falte ao show. */
  --font-secondary: "Open Sans", Verdana, sans-serif; /* Fonte secund√°ria. √ìtima para textos mais longos,
                                                        par√°grafos, onde a leitura f√°cil √© prioridade. */

  /* -- SE√á√ÉO DA PALETA DE CORES (NOSSO ARCO-√çRIS PARTICULAR!) -- */
  /* As cores que v√£o dar a cara do ZooDex! */
  --color-bg-light: #f0f2f5; /* Um cinza MUITO clarinho. Perfeito para o fundo principal da p√°gina,
                                 d√° uma sensa√ß√£o de limpeza e n√£o cansa os olhos. */
  --color-text-light: #212529; /* Um cinza bem escuro, quase preto. Excelente para o texto principal,
                                  pois tem √≥timo contraste com fundos claros, facilitando a leitura. */
  --color-text-muted: #6c757d; /* Cinza de tom m√©dio. "Muted" significa "suave" ou "discreto".
                                  Usamos para textos secund√°rios, dicas em campos de formul√°rio
                                  (placeholders), ou informa√ß√µes que n√£o precisam gritar por aten√ß√£o. */
  --color-primary: #2e7d32; /* VERDE FLORESTA ESCURO! üå≤ Esta √© a NOSSA COR PRIM√ÅRIA, a cor da marca ZooDex!
                               Usada em elementos importantes que queremos que o usu√°rio note logo de cara,
                               como o cabe√ßalho, t√≠tulos principais, bot√µes importantes. */
  --color-primary-darker: #1b4d1e; /* Um tom AINDA MAIS ESCURO do nosso verde prim√°rio.
                                     Ideal para quando o usu√°rio passa o mouse sobre um bot√£o verde
                                     (efeito `:hover`), ou para bordas sutis que combinam. */
  --color-secondary: #ef6c00; /* LARANJA QUEIMADO! üî• Nossa COR SECUND√ÅRIA.
                                 Cores secund√°rias s√£o como o "melhor amigo" da cor prim√°ria.
                                 Usamos para criar contraste, para bot√µes de a√ß√£o importantes
                                 (CTAs - Call to Action), alertas, ou outros elementos que precisam
                                 de um "cheguei!" visual. */
  --color-secondary-darker: #c65400; /* Um tom mais escuro do nosso laranja secund√°rio, para os mesmos
                                        usos do `--color-primary-darker` (hovers, etc.). */
  --color-card-bg: #ffffff; /* BRANCO PURO. Perfeito para o fundo dos "cards" dos animais,
                               fazendo com que as informa√ß√µes e fotos dos bichinhos se destaquem
                               do fundo da p√°gina. */
  --color-shadow: rgba(
    0,
    /* Sem deslocamento horizontal da sombra. */ 0,
    /* Sem deslocamento vertical da sombra. (Ajustaremos isso no `box-shadow` real) */
      0,
    /* Cor base da sombra: Preto. */ 0.1
      /* Opacidade da sombra: 10%. Isso a torna suave e sutil. */
  ); /* Usaremos esta vari√°vel para criar sombras consistentes. */
  --color-border-light: #dee2e6; /* Cinza bem clarinho, √≥timo para bordas discretas em campos de
                                    formul√°rio (inputs), divis√≥rias entre se√ß√µes, ou nos cards. */
  --color-error: #dc3545; /* VERMELHO ALERTA! Universalmente entendido como erro, perigo ou aviso importante.
                            Usaremos para mensagens de erro de formul√°rio, etc. */
  --color-success: #198754; /* VERDE ESPERAN√áA! Usado para indicar que algo deu certo,
                             uma confirma√ß√£o, uma mensagem de sucesso. */

  /* -- SE√á√ÉO DE CORES PARA N√çVEIS DE EXTIN√á√ÉO (SEM√ÅFORO DA NATUREZA!) -- */
  /* Cada status de conserva√ß√£o dos animais (da Lista Vermelha da IUCN) ter√° uma cor.
     Isso cria uma identifica√ß√£o visual R√ÅPIDA e intuitiva do n√≠vel de risco.
     LC = Least Concern (Pouco Preocupante), NT = Near Threatened (Quase Amea√ßado), etc. */
  --color-lc: #aed581; /* Verde suave, tranquilidade. */
  --color-nt: #dce775; /* Amarelo-esverdeado, um pouco de aten√ß√£o. */
  --color-vu: #ffee58; /* Amarelo, alerta! */
  --color-en: #ffa726; /* Laranja, perigo se aproximando! */
  --color-cr: #ef5350; /* Vermelho, perigo cr√≠tico! */
  --color-ew: #7e57c2; /* Roxo, tristeza... extinto na natureza. */
  --color-ex: #616161; /* Cinza escuro, luto... extinto. */
  --color-dd: #bdbdbd; /* Cinza m√©dio, mist√©rio... dados insuficientes. */
  --color-ne: #e0e0e0; /* Cinza claro, ainda n√£o sabemos... n√£o avaliado. */
  --color-default-extinction: #cccccc; /* Uma cor "neutra" se o status for desconhecido. */

  /* -- SE√á√ÉO DE TAMANHOS E ESPA√áAMENTOS (NOSSAS R√âGUAS E COMPASSOS!) -- */
  /* Raio da Borda (Border Radius): Para deixar os cantos dos elementos arredondados,
     dando um visual mais moderno e suave. */
  --border-radius: 8px; /* Um raio de borda padr√£o, bom para elementos maiores como cards, modais. */
  --border-radius-small: 4px; /* Um raio menor, para elementos menores como bot√µes, inputs, tags. */

  /* Espa√ßamentos (Paddings e Margins):
     Definir alguns tamanhos de espa√ßamento padr√£o ajuda a manter o "ritmo vertical"
     (o fluxo visual de cima para baixo) e a consist√™ncia em toda a p√°gina.
     Podemos adicionar mais tamanhos conforme precisarmos. `rem` √© √≥timo aqui! */
  --spacing-small: 0.5rem; /* 8px (se 1rem = 16px). Para pequenos espa√ßos. */
  --spacing-medium: 1rem; /* 16px. Um espa√ßamento comum. */
  --spacing-large: 1.5rem; /* 24px. Para quando precisamos de mais respiro. */

  /* Z-indexes (Controle de Camadas - Quem Fica por Cima?):
     `z-index` decide a ordem de "empilhamento" de elementos que se sobrep√µem na tela.
     Um elemento com `z-index` MAIOR aparece NA FRENTE de um com `z-index` MENOR.
     Muito √∫til para coisas como menus que abrem por cima, janelas modais,
     cabe√ßalhos que ficam fixos no topo, etc. */
  --z-index-header: 100; /* O header principal da aplica√ß√£o deve ficar acima da maioria do conte√∫do. */
  --z-index-modal: 1000; /* Janelas modais (pop-ups) devem ficar acima de TUDO. */
  --z-index-dropdown: 500; /* Menus dropdown ficam acima do conte√∫do normal, mas abaixo de modais. */
}

/* --- RESET B√ÅSICO E BOX-SIZING GLOBAL --- */
/* ALUNOS, ATEN√á√ÉO A ESTA REGRA! √â UM PEQUENO TRUQUE COM UM GRANDE IMPACTO! */
*,  /* O asterisco `*` √© o "seletor universal" - ele seleciona TODOS os elementos HTML na p√°gina. */
*::before, /* Seleciona os pseudo-elementos `::before` de todos os elementos. */
*::after {
  /* Seleciona os pseudo-elementos `::after` de todos os elementos. */

  /* `box-sizing: border-box;` - A M√ÅGICA DO BOX MODEL INTUITIVO!
     Imagine que cada elemento HTML √© uma caixa. Por padr√£o no CSS (`box-sizing: content-box;`),
     se voc√™ define:
       `width: 100px;`
       `padding: 10px;`
       `border: 1px solid black;`
     A largura TOTAL da caixa na tela N√ÉO ser√° 100px! Ser√°:
       100px (conte√∫do) + 10px (padding esquerdo) + 10px (padding direito) +
       1px (borda esquerda) + 1px (borda direita) = 122px. Que confus√£o!

     COM `box-sizing: border-box;`, a hist√≥ria muda:
     A `width` (ou `height`) que voc√™ define agora INCLUI o `padding` e a `border`.
     Ent√£o, com `width: 100px; padding: 10px; border: 1px solid black; box-sizing: border-box;`,
     a largura TOTAL da caixa na tela ser√° EXATAMENTE 100px. O padding e a borda
     ficam "para dentro".
     ISSO TORNA OS LAYOUTS MUITO MAIS PREVIS√çVEIS E F√ÅCEIS DE GERENCIAR, especialmente
     quando voc√™ trabalha com porcentagens (como `width: 100%;`) e paddings.
     √â uma das primeiras coisas que muitos desenvolvedores colocam em seus CSS globais! */
  box-sizing: border-box;

  /* ALUNOS: DICA OPCIONAL DE "RESET" MAIS COMPLETO
     Muitos desenvolvedores gostam de come√ßar removendo TODAS as margens e paddings
     padr√£o de TODOS os elementos, para ter controle total desde o in√≠cio.
     Se voc√™ quisesse fazer isso, adicionaria:
       margin: 0;
       padding: 0;
     AQUI DENTRO DESTE SELETOR `*, *::before, *::after`.
     No entanto, isso pode ser um pouco "agressivo", pois remove espa√ßamentos padr√£o
     que √†s vezes s√£o √∫teis (como a margem entre par√°grafos).
     Para este projeto, `margin: 0;` no `body` (que veremos abaixo) j√° nos d√° uma
     boa base, e o `box-sizing: border-box;` √© o mais importante aqui. */
}

/* --- ESTILOS BASE PARA ELEMENTOS HTML --- */

/* Estilos aplicados diretamente √† tag `<html>` (o elemento raiz). */
html {
  /* `font-size: 16px;` define o tamanho da fonte base para a unidade `rem`.
     Isso significa que, neste projeto, `1rem` ser√° igual a `16px`.
     Se o usu√°rio mudar o tamanho da fonte padr√£o no navegador DELE, este valor base
     tamb√©m pode mudar, e todos os tamanhos em `rem` na sua aplica√ß√£o v√£o escalar
     proporcionalmente. Isso √© √ìTIMO para acessibilidade! */
  font-size: 16px;

  /* `scroll-behavior: smooth;` faz com que, se voc√™ tiver links internos na p√°gina
     (ex: `<a href="#secao-contato">Contato</a>`) ou usar JavaScript para rolar a p√°gina
     (como `window.scrollTo`), a rolagem seja ANIMADA SUAVEMENTE, em vez de um salto brusco.
     Um toque de eleg√¢ncia! */
  scroll-behavior: smooth;

  /* ALUNOS: CUIDADO COM `overflow-x: hidden;` AQUI!
     Alguns desenvolvedores colocam `overflow-x: hidden;` na tag `<html>` ou `<body>`
     como uma forma "r√°pida" de impedir barras de rolagem horizontais indesejadas,
     que aparecem quando algum elemento est√° "vazando" para fora da largura da tela.
     POR√âM, isso pode ser perigoso porque MASCARA o problema real. √â como varrer
     a sujeira para debaixo do tapete. O ideal √© ENCONTRAR e CORRIGIR o elemento
     que est√° causando o vazamento.
     Se, DEPOIS de ter certeza que n√£o h√° vazamentos, voc√™ ainda quiser garantir que
     nenhuma barra de rolagem horizontal apare√ßa por acidente, voc√™ poderia adicionar,
     mas use com extrema cautela. Para este projeto, vamos tentar resolver os vazamentos
     primeiro.
     Exemplo (N√ÉO RECOMENDADO COMO PRIMEIRA SOLU√á√ÉO):
     overflow-x: hidden;
  */
}

/* Estilos aplicados diretamente √† tag `<body>` (o corpo principal da sua p√°gina). */
body {
  /* Define a fam√≠lia de fontes padr√£o para TODO o texto dentro do `<body>`.
     Usamos nossa vari√°vel `--font-secondary` (Open Sans). */
  font-family: var(--font-secondary);

  /* Define a cor de fundo padr√£o da P√ÅGINA INTEIRA.
     Usamos nossa vari√°vel `--color-bg-light` (o cinza bem clarinho). */
  background-color: var(--color-bg-light);

  /* Define a cor padr√£o do TEXTO em toda a p√°gina.
     Usamos nossa vari√°vel `--color-text-light` (o cinza escuro). */
  color: var(--color-text-light);

  /* `margin: 0;` - IMPORTANTE! Remove as margens padr√£o que a maioria dos navegadores
     coloca automaticamente na tag `<body>`. Isso garante que seu conte√∫do comece
     EXATAMENTE no canto da tela, sem espa√ßos inesperados. */
  margin: 0;

  /* `line-height: 1.6;` define a altura da linha padr√£o para o texto.
     Um valor sem unidade (como 1.6) significa "1.6 vezes o tamanho da fonte atual".
     Uma boa altura de linha (geralmente entre 1.4 e 1.8) torna os par√°grafos
     MUITO mais f√°ceis e agrad√°veis de ler. */
  line-height: 1.6;

  /* Melhorias para a renderiza√ß√£o de fontes (conhecido como "anti-aliasing"):
     Estas propriedades s√£o dicas para o navegador tentar suavizar as bordas das
     letras, fazendo com que pare√ßam menos "serrilhadas" e mais n√≠tidas. */
  -webkit-font-smoothing: antialiased; /* Para navegadores baseados em WebKit (Chrome, Safari, Edge novo). */
  -moz-osx-font-smoothing: grayscale; /* Para Firefox em sistemas macOS. */

  /* `min-height: 100vh;` - ESSENCIAL PARA O "STICKY FOOTER"!
     `vh` √© uma unidade de medida que significa "viewport height" (altura da janela de visualiza√ß√£o).
     `100vh` significa "100% da altura da janela do navegador".
     Esta regra garante que o `<body>` ocupe, NO M√çNIMO, toda a altura da tela.
     Se o conte√∫do da sua p√°gina for curto, o `<body>` ainda assim se esticar√° at√© o final
     da tela. Isso √© crucial para que o rodap√© (footer) possa ser "empurrado" para baixo
     corretamente quando usamos Flexbox para o layout principal. */
  min-height: 100vh;

  /* `display: flex;` e `flex-direction: column;` no `<body>`:
     Transformamos o `<body>` em um "container flex".
     `flex-direction: column;` faz com que seus filhos diretos (no nosso caso,
     o `<div id="root">` onde o React monta a aplica√ß√£o) sejam empilhados
     VERTICALMENTE. Isso tamb√©m √© parte da estrat√©gia do "sticky footer". */
  display: flex;
  flex-direction: column;

  /* ALUNOS: PARA COMBATER O PROBLEMA DE "ZOOM OUT" E BARRAS DE ROLAGEM HORIZONTAIS!
     `overflow-x: hidden;` no `<body>` "corta" qualquer conte√∫do que tente
     ser mais largo que a tela. Se algum elemento estiver "vazando" para a direita,
     ele ser√° escondido e n√£o for√ßar√° o navegador a dar zoom out ou mostrar uma
     barra de rolagem horizontal.
     ATEN√á√ÉO: O ideal √© sempre encontrar e corrigir o elemento que est√° causando
     o vazamento. Usar `overflow-x: hidden;` √© como um "band-aid" que resolve
     o sintoma (a barra de rolagem ou o zoom out), mas n√£o necessariamente a causa.
     No entanto, para garantir que a experi√™ncia do usu√°rio n√£o seja quebrada por
     pequenos vazamentos, esta √© uma salvaguarda comum e √∫til. */
  overflow-x: hidden;
}

/* Estilos para o container principal do React (`<div id="root">`).
   Esta √© a div no seu `public/index.html` onde toda a sua aplica√ß√£o React
   √© "injetada" e renderizada. */
#root {
  display: flex; /* O `#root` tamb√©m se torna um container flex. */
  flex-direction: column; /* Seus filhos (o componente App.js) ser√£o empilhados verticalmente. */

  /* `flex-grow: 1;` - A M√ÅGICA FINAL DO "STICKY FOOTER"!
     Se o `<body>` √© um container flex vertical, `flex-grow: 1;` no `#root` (que √© um filho
     direto do `<body>`) faz com que o `#root` CRES√áA para ocupar TODO o espa√ßo vertical
     restante dentro do `<body>`.
     Junto com `min-height: 100vh;` no `<body>` e `margin-top: auto;` no seu componente Footer,
     isso garante que o Footer fique "grudado" no final da p√°gina, mesmo se o conte√∫do
     principal for curto. */
  flex-grow: 1;

  width: 100%; /* Garante que o `#root` ocupe toda a largura dispon√≠vel do `<body>`. */

  /* ALUNOS: `overflow-x: hidden;` aqui tamb√©m?
     Geralmente, colocar no `<body>` √© suficiente. Se voc√™ ainda tiver problemas
     de overflow horizontal que parecem originar de dentro da aplica√ß√£o React,
     voc√™ PODE adicionar `overflow-x: hidden;` aqui tamb√©m, mas isso seria
     um sinal mais forte de que algum componente React est√° causando o problema
     e precisa ser investigado.
     Exemplo (use se realmente necess√°rio):
     overflow-x: hidden;
  */
}

/* --- ESTILIZA√á√ÉO DA BARRA DE ROLAGEM (OPCIONAL E COSM√âTICO) --- */
/* ALUNOS: Isto √© um "extra" para deixar a barra de rolagem mais bonita!
   Estes estilos customizam a apar√™ncia da barra de rolagem.
   Eles funcionam principalmente em navegadores baseados em WebKit (como Chrome, Safari, Edge novo).
   O Firefox tem sua pr√≥pria maneira de estilizar scrollbars (usando as propriedades
   `scrollbar-width` e `scrollbar-color`, que s√£o mais simples mas menos customiz√°veis).
   Esta √© uma melhoria puramente est√©tica e pode ser removida se voc√™ n√£o gostar
   ou quiser manter o visual padr√£o do navegador. */

/* Para a barra de rolagem inteira (vertical e horizontal) */
::-webkit-scrollbar {
  width: 10px; /* Largura da barra de rolagem VERTICAL. */
  height: 10px; /* Altura da barra de rolagem HORIZONTAL (se houver). */
}

/* Para o "caminho" ou a "trilha" por onde a barra de rolagem se move. */
::-webkit-scrollbar-track {
  background: #f1f1f1; /* Cor de fundo do caminho (um cinza bem claro). */
  border-radius: 10px; /* Cantos arredondados para o caminho. */
}

/* Para o "polegar" (thumb) ‚Äì a parte da barra que o usu√°rio realmente arrasta. */
::-webkit-scrollbar-thumb {
  background: #a0a0a0; /* Cor do polegar (um cinza m√©dio). */
  border-radius: 10px; /* Cantos arredondados para o polegar. */
  /* Uma pequena borda em volta do polegar, da mesma cor do track,
     para dar um efeito de "espa√ßamento" e mais polimento. */
  border: 2px solid #f1f1f1;
}

/* Quando o mouse est√° SOBRE o polegar da barra de rolagem. */
::-webkit-scrollbar-thumb:hover {
  background: #777777; /* Cor fica um pouco mais escura para dar feedback visual. */
}

/* --- CLASSE UTILIT√ÅRIA GLOBAL: .visually-hidden --- */
/*
  ALUNOS: ESTA CLASSE √â UM TRUQUE DE MESTRE PARA ACESSIBILIDADE (a11y)!
  √Äs vezes, voc√™ tem um elemento na tela que √© visualmente √≥bvio (como um √≠cone de "X"
  para fechar), mas que n√£o tem texto para um leitor de tela anunciar.
  Ou, voc√™ quer fornecer mais contexto para leitores de tela sem poluir a interface visual.

  A classe `.visually-hidden` ESCONDE o conte√∫do VISUALMENTE, mas o mant√©m
  DISPON√çVEL para leitores de tela e outras tecnologias assistivas.
  √â a forma correta de esconder texto apenas para quem n√£o pode ver a interface.
  N√ÉO USE `display: none;` ou `visibility: hidden;` para isso, pois eles removem
  o elemento completamente, inclusive para leitores de tela!
*/
.visually-hidden {
  position: absolute !important; /* Tira o elemento do fluxo normal da p√°gina.
                                   `!important` √© usado com MUITA cautela no CSS, mas aqui
                                   √© uma das poucas exce√ß√µes onde √© comum para garantir
                                   que esta regra de acessibilidade sempre funcione. */
  height: 1px; /* Reduz a altura e largura ao m√≠nimo poss√≠vel. */
  width: 1px;
  overflow: hidden; /* Esconde qualquer conte√∫do que "vaze" desse tamanho min√∫sculo. */
  /* `clip` e `clip-path` s√£o t√©cnicas para "cortar" o elemento,
     tornando-o efetivamente invis√≠vel, mas ainda presente no DOM. */
  clip: rect(
    1px,
    1px,
    1px,
    1px
  ); /* T√©cnica mais antiga, mas com bom suporte. */
  clip-path: inset(50%); /* T√©cnica mais moderna e prefer√≠vel. */
  white-space: nowrap; /* Impede que o texto (se houver) quebre em v√°rias linhas. */
  border: 0; /* Remove qualquer borda. */
  margin: -1px; /* Um truque para garantir que o elemento de 1px n√£o ocupe espa√ßo vis√≠vel. */
  padding: 0; /* Remove qualquer preenchimento. */
}

/* --- ESTILOS GLOBAIS PARA MENSAGENS DE CARREGAMENTO E ERRO --- */
/*
  Estas classes s√£o "utilit√°rias": podem ser usadas em qualquer lugar na sua aplica√ß√£o
  para exibir mensagens de "Carregando..." ou mensagens de erro de forma consistente.
  Voc√™ as aplicaria a um <p> ou <div> no seu JSX quando necess√°rio.
*/
.loading-message,
.error-message {
  text-align: center; /* Centraliza o texto da mensagem. */
  font-size: 1.1rem; /* Tamanho da fonte um pouco maior para que a mensagem se destaque. */
  /* Usa nossas vari√°veis de espa√ßamento para padding. */
  padding: var(--spacing-large) var(--spacing-medium);
  color: var(--color-text-muted); /* Cor de texto secund√°ria (cinza suave). */
  margin-top: 2rem; /* Bom espa√ßo acima e abaixo da mensagem. */
  margin-bottom: 2rem;
}

/* Estilo espec√≠fico para mensagens de ERRO. */
.error-message {
  color: var(--color-error); /* Texto usa nossa cor de erro vermelha. */
  background-color: #f8d7da; /* Um fundo rosa bem clarinho, comum para alertas de erro. */
  border: 1px solid #f5c6cb; /* Borda rosa um pouco mais escura. */
  border-radius: var(--border-radius-small); /* Cantos arredondados. */
}

/*
   ALUNOS: FIM DO ARQUIVO `index.css`!

   O QUE APRENDEMOS (OU RELEMBRAMOS) DE IMPORTANTE AQUI?
   - Vari√°veis CSS (`:root` e `var()`): Para um design consistente e f√°cil de manter.
   - `box-sizing: border-box;`: Para um modelo de caixa mais intuitivo.
   - Estilos Base para `html` e `body`: Definindo o alicerce da p√°gina.
     - `margin: 0;` no `body` para remover espa√ßamentos padr√£o.
     - `min-height: 100vh;` e `display: flex; flex-direction: column;` no `body`
       (e `flex-grow: 1;` no `#root`) para a t√©cnica do "sticky footer".
     - `overflow-x: hidden;` no `body` como uma salvaguarda contra barras de rolagem
       horizontais indesejadas (mas lembre-se de tentar consertar a causa raiz do overflow!).
   - Acessibilidade: Com a classe `.visually-hidden`.
   - Consist√™ncia: Com classes utilit√°rias como `.loading-message` e `.error-message`.

   Este arquivo √© o ponto de partida para o visual de toda a sua aplica√ß√£o.
   Agora, os CSS Modules dos seus componentes v√£o construir sobre esta base!
   Parab√©ns por chegar at√© aqui! üéâ
*/
