// Caminho: src/components/AnimalList.jsx

// =================================================================================================
// ARQUIVO: AnimalList.jsx
// PROP√ìSITO: Este componente √© o respons√°vel por exibir uma cole√ß√£o (lista) de cards de animais.
//            Ele recebe um array de objetos de animais do seu componente pai (App.js)
//            e, para cada animal nesse array, ele renderiza (mostra na tela) um
//            componente <AnimalCard />.
//
// CONCEITOS PRINCIPAIS DO REACT E JAVASCRIPT UTILIZADOS AQUI:
//  - Componentes Funcionais: A forma padr√£o de criar componentes em React.
//  - Props (Propriedades): Como o componente recebe dados e fun√ß√µes de seu pai.
//      - 'animals': Um array de objetos. Cada objeto cont√©m as informa√ß√µes de um animal.
//      - 'onSelectAnimal': Uma fun√ß√£o (callback) que √© passada para cada AnimalCard.
//                         Quando um AnimalCard √© clicado, essa fun√ß√£o √© chamada,
//                         permitindo que o App.js (o pai) saiba qual animal foi selecionado.
//  - Renderiza√ß√£o de Listas com '.map()': O m√©todo de array '.map()' do JavaScript √© usado
//                                       para transformar cada item de um array de dados
//                                       em um elemento React (um componente <AnimalCard />).
//  - A Prop Especial 'key': Uma prop obrigat√≥ria e √∫nica que o React exige ao renderizar
//                           listas de elementos. Ela ajuda o React a identificar
//                           eficientemente quais itens mudaram, foram adicionados ou removidos.
//  - Renderiza√ß√£o Condicional: Verificar se a lista de animais est√° vazia antes de
//                              tentar renderizar os cards.
//  - Composi√ß√£o de Componentes: O AnimalList "comp√µe" sua interface usando m√∫ltiplos
//                               componentes AnimalCard.
// =================================================================================================

// --- 1. IMPORTA√á√ïES DE M√ìDULOS E COMPONENTES ---

// Importamos a biblioteca 'React'. √â a base para tudo em React,
// permitindo-nos definir componentes e usar JSX.
import React from "react";

// Importamos o componente 'AnimalCard'.
// O AnimalList vai criar uma inst√¢ncia de <AnimalCard /> para cada animal
// que ele precisar exibir. Isso √© um exemplo de "composi√ß√£o" de componentes.
import AnimalCard from "./AnimalCard";

// Importamos o objeto 'styles' do nosso arquivo CSS Module (AnimalList.module.css).
// As classes definidas em 'AnimalList.module.css' (ex: .animalListContainer)
// ser√£o usadas para aplicar estilos ao layout desta lista de cards.
// Ex: <section className={styles.animalListContainer}>
import styles from "./AnimalList.module.css";

// --- 2. DEFINI√á√ÉO DO COMPONENTE FUNCIONAL 'AnimalList' ---

// O componente AnimalList √© uma fun√ß√£o que aceita um objeto de 'props' como argumento.
// Usamos a desestrutura√ß√£o de props ({ animals, onSelectAnimal }) para extrair
// diretamente as propriedades que esperamos receber do componente pai (App.js).
const AnimalList = ({ animals, onSelectAnimal }) => {
  // --- A. VERIFICA√á√ÉO INICIAL: H√Å ANIMAIS PARA EXIBIR? ---
  // Antes de tentarmos criar uma lista de cards, √© uma boa pr√°tica verificar se
  // realmente temos animais para mostrar.

  // Condi√ß√£o:
  // - '!animals': Verifica se a prop 'animals' √© 'undefined', 'null', 'false', 0, NaN ou uma string vazia.
  //               Se 'animals' n√£o for passado, esta condi√ß√£o ser√° verdadeira.
  // - 'animals.length === 0': Verifica se o array 'animals' est√° vazio.
  if (!animals || animals.length === 0) {
    // Se n√£o houver animais, retornamos um par√°grafo <p> com uma mensagem para o usu√°rio.
    // Este 'return' interrompe a execu√ß√£o da fun√ß√£o AnimalList aqui, e o JSX
    // da lista de cards (mais abaixo) n√£o ser√° processado nem renderizado.

    // Aplicamos alguns estilos inline simples para a mensagem.
    // Em um projeto maior, essa mensagem poderia ser um componente separado ou usar classes globais.
    // Estamos usando vari√°veis CSS globais (ex: --color-text-muted) que foram definidas em src/index.css.
    return (
      <p
        style={{
          textAlign: "center", // Centraliza o texto.
          color: "var(--color-text-muted)", // Cor cinza para texto secund√°rio.
          fontSize: "1.25rem", // Tamanho da fonte um pouco maior.
          padding: "2.5rem 1rem", // Espa√ßamento interno (2.5rem em cima/baixo, 1rem nas laterais).
          marginTop: "1rem", // Um pouco de espa√ßo acima.
        }}
      >
        Ops! Nenhum animalzinho encontrado com os filtros atuais. Que tal tentar
        uma nova busca? üêæ
      </p>
    );
  }

  // --- B. RENDERIZA√á√ÉO DA LISTA DE CARDS DE ANIMAIS ---
  // Se a verifica√ß√£o acima passou, significa que temos um array 'animals' com pelo menos um animal.
  // Agora, vamos construir a lista de <AnimalCard />.

  // Usamos a tag <section> do HTML5, que √© semanticamente apropriada para agrupar
  // um conjunto de conte√∫do relacionado (neste caso, a lista de cards de animais).
  // - id="animal-list": Um ID √∫nico para esta se√ß√£o. Pode ser √∫til para links √¢ncora internos na p√°gina
  //                     ou para sele√ß√£o em testes automatizados, mas n√£o √© estritamente necess√°rio para o React.
  // - className={styles.animalListContainer}: Aplica a classe CSS '.animalListContainer'
  //                                          definida em 'AnimalList.module.css'. Esta classe
  //                                          ser√° respons√°vel pelo layout em grade dos cards.
  return (
    <section id="animal-list" className={styles.animalListContainer}>
      {/*
        A M√°gica do '.map()': Transformando Dados em Componentes React
        - 'animals.map(...)': O m√©todo '.map()' √© uma das fun√ß√µes mais importantes para trabalhar
          com arrays em JavaScript e, por consequ√™ncia, em React para renderizar listas.
          Ele N√ÉO modifica o array original 'animals'. Em vez disso, ele CRIA UM NOVO ARRAY.
        - Como funciona:
          1. Ele itera (passa por) cada item do array 'animals'.
          2. Para cada 'animalObject' encontrado no array, ele executa a fun√ß√£o que passamos
             (a "arrow function" `(animalObject) => { ... }`).
          3. O valor RETORNADO por essa fun√ß√£o para cada animal se torna um item no NOVO array.
          4. No nosso caso, a fun√ß√£o retorna um componente <AnimalCard />.
             Ent√£o, o resultado de 'animals.map(...)' ser√° um array de componentes <AnimalCard />.
             Ex: [<AnimalCard ... />, <AnimalCard ... />, <AnimalCard ... />]
        - O React ent√£o pega este array de componentes e os renderiza na tela.
      */}
      {animals.map((animalObject) => {
        // Para cada 'animalObject' na lista 'animals':

        // Verifica√ß√£o opcional (para robustez extra, embora App.js deva garantir IDs):
        // Se o animal n√£o tiver um ID, podemos registrar um aviso ou pular este animal.
        const animalId = animalObject.id_animal || animalObject.codigo;
        if (!animalId) {
          console.warn(
            "AnimalList: Encontrado um animal sem 'id_animal' ou 'codigo'. Pulando renderiza√ß√£o deste card:",
            animalObject
          );
          return null; // Retornar null faz com que o React n√£o renderize nada para este item.
        }

        // Retornamos um componente <AnimalCard /> para este animal espec√≠fico.
        return (
          <AnimalCard
            // A Prop 'key': EXTREMAMENTE IMPORTANTE para listas em React!
            // - Prop√≥sito: O React usa a 'key' para identificar unicamente cada elemento
            //              gerado dentro de uma lista (como os <AnimalCard /> aqui).
            //              Isso permite que o React seja muito eficiente ao atualizar a lista.
            //              Por exemplo, se um animal for adicionado, removido ou a lista for
            //              reordenada, o React usa as 'keys' para saber exatamente quais
            //              elementos mudaram, em vez de ter que recriar todos eles.
            // - Valor da 'key': Deve ser uma STRING ou N√öMERO que seja √öNICO entre
            //                   os "irm√£os" na lista (ou seja, √∫nico entre todos os AnimalCards
            //                   gerados por este .map()).
            // - MELHOR PR√ÅTICA: Use um ID est√°vel e √∫nico que venha dos seus dados.
            //                  No nosso caso, 'animalObject.id_animal' ou 'animalObject.codigo' s√£o boas escolhas.
            // - EVITE USAR O √çNDICE DO ARRAY (ex: `key={index}`) como chave se a ordem dos
            //   itens na lista puder mudar, ou se itens puderem ser inseridos/removidos
            //   no meio da lista. Usar o √≠ndice nesses casos pode levar a bugs
            //   comportamento inesperado e problemas de performance.
            key={animalId} // Usamos o ID √∫nico do animal como chave.
            // Passando Props para o Componente AnimalCard:
            // Aqui, estamos passando duas props para cada <AnimalCard />:

            // 1. prop 'animal':
            //    Passamos o 'animalObject' completo (o objeto com todas as informa√ß√µes
            //    do animal atual da itera√ß√£o do .map()) para o AnimalCard.
            //    Dentro do componente AnimalCard, ele poder√° acessar este objeto
            //    atrav√©s de 'props.animal'.
            animal={animalObject}
            // 2. prop 'onSelectAnimal':
            //    Repassamos a fun√ß√£o 'onSelectAnimal' que o AnimalList recebeu do seu pai (App.js).
            //    Isso permite que cada AnimalCard individual, ao ser clicado, chame esta fun√ß√£o.
            //    A fun√ß√£o 'onSelectAnimal' no App.js saber√° ent√£o qual animal foi clicado
            //    (porque o AnimalCard passar√° o ID do animal para ela).
            //    Este √© um padr√£o comum em React para comunica√ß√£o de filho para pai.
            onSelectAnimal={onSelectAnimal}
          />
        );
      })}{" "}
      {/* Fim da fun√ß√£o .map() e do array de AnimalCards */}
    </section> // Fim da tag <section> que cont√©m a lista
  );
}; // Fim da defini√ß√£o do componente AnimalList

// --- 3. EXPORTA√á√ÉO DO COMPONENTE ---
// 'export default AnimalList;' torna o componente AnimalList dispon√≠vel para
// ser importado e utilizado em outros arquivos da aplica√ß√£o, como no App.js.
export default AnimalList;
