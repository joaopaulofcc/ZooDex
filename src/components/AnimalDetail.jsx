// Caminho: src/components/AnimalDetail.jsx

// =================================================================================================
// ARQUIVO: AnimalDetail.jsx
// Ol√°, futuro(a) desenvolvedor(a) de interfaces incr√≠veis com React! üöÄ
// Este arquivo √© o "cora√ß√£o" da p√°gina que mostra todos os DETALHES de UM animal espec√≠fico
// do nosso ZooDex. Quando voc√™ clica em um card na lista principal, √© esta p√°gina que aparece.
//
// O QUE ESTE COMPONENTE FAZ?
//  - Recebe informa√ß√µes sobre um animal (do App.js).
//  - Mostra o "tazo" do animal (a imagem redonda que vira!).
//  - Exibe o nome comum, nome cient√≠fico e o status de conserva√ß√£o com cores e uma escala visual.
//  - Apresenta uma galeria de fotos adicionais do animal.
//  - Mostra um mapa interativo com a distribui√ß√£o geogr√°fica do animal.
//  - Lista informa√ß√µes detalhadas como classifica√ß√£o, habitat, ecologia, amea√ßas, curiosidades, etc.
//  - Permite que o usu√°rio clique nas imagens (do tazo ou da galeria) para v√™-las ampliadas
//    em um "lightbox" (um visualizador de imagem que cobre a tela).
//  - Tem um bot√£o para voltar √† lista principal de animais.
//
// NOVAS FUNCIONALIDADES E MELHORIAS RECENTES:
//  - INTERA√á√ÉO DO TAZO EM DISPOSITIVOS DE TOQUE (CELULARES/TABLETS):
//    - Antes, o tazo s√≥ virava quando o mouse passava por cima (hover).
//    - AGORA, em um celular ou tablet, um TOQUE (tap) no tazo far√° ele VIRAR!
//    - E mais: o mesmo toque que vira o tazo tamb√©m abrir√° a face vis√≠vel dele no lightbox
//      para o usu√°rio ver a imagem ampliada.
//  - Comportamento de Hover em Desktops Mantido: Se voc√™ estiver usando um computador com mouse,
//    o tazo ainda vai virar quando voc√™ passar o mouse por cima. O clique do mouse tamb√©m
//    ter√° o mesmo efeito do toque (virar + ampliar).
//
// CONCEITOS PRINCIPAIS DE REACT E JAVASCRIPT QUE VOC√ä VAI VER (E APRENDER!) AQUI:
//  - Componentes Funcionais: A forma moderna e mais comum de criar "blocos de constru√ß√£o"
//                           em React. Nosso `AnimalDetail` √© um deles!
//  - Props (Propriedades): Pense nas props como "informa√ß√µes" ou "instru√ß√µes" que um
//                          componente pai (como o App.js) passa para um componente filho
//                          (como este `AnimalDetail`). Aqui, recebemos o objeto `animal`
//                          (com todos os dados) e a fun√ß√£o `onBack` (para voltar √† lista).
//  - `useState` (Hook de Estado): Permite que nosso componente tenha sua pr√≥pria "mem√≥ria" interna.
//                               Usamos para "lembrar":
//                                 - Se o tazo no cabe√ßalho est√° virado (`tazoCabecalhoVirado`).
//                                 - Qual imagem est√° sendo mostrada no lightbox e se ele est√° aberto
//                                   (`lightboxInfo`).
//  - `useEffect` (Hook de Efeito Colateral): Para interagir com coisas "fora" do React,
//                                          como adicionar um "escutador de eventos" (event listener)
//                                          para a tecla "Escape" (para fechar o lightbox).
//                                          √â importante "limpar" esses efeitos (remover os listeners)
//                                          quando o componente n√£o for mais necess√°rio.
//  - `useMemo` (Hook de Memoiza√ß√£o): Uma ferramenta de otimiza√ß√£o. Se temos um c√°lculo que pode
//                                  ser "pesado" e que n√£o precisa ser refeito toda vez que o
//                                  componente renderiza, `useMemo` "memoriza" (guarda) o resultado
//                                  e s√≥ refaz o c√°lculo se as "depend√™ncias" (dados que o c√°lculo usa)
//                                  mudarem. Usamos para a lista de imagens da galeria.
//  - `useCallback` (Hook de Memoiza√ß√£o para Fun√ß√µes): Similar ao `useMemo`, mas para FUN√á√ïES.
//                                                  Ele "memoriza" a pr√≥pria fun√ß√£o, para que ela
//                                                  n√£o seja recriada desnecessariamente a cada renderiza√ß√£o.
//                                                  √ötil para fun√ß√µes passadas como props ou usadas em `useEffect`.
//                                                  Usamos para os handlers de evento do lightbox e do tazo.
//  - JSX (JavaScript XML): A sintaxe especial que parece HTML, mas est√° dentro do JavaScript.
//                          √â como descrevemos a "cara" do nosso componente.
//  - Renderiza√ß√£o Condicional: Mostrar ou esconder partes da interface com base em certas
//                              condi√ß√µes (ex: `condicao && <MeuElemento />` ou `condicao ? <A /> : <B />`).
//                              Usamos para o lightbox, para o tazo/imagem principal, e nas se√ß√µes de detalhes.
//  - Mapeamento de Arrays para Elementos (Listas): O famoso m√©todo `.map()`! Usamos para transformar
//                                                 arrays de dados (como a lista de curiosidades ou as
//                                                 imagens da galeria) em uma lista de elementos JSX (como `<li>` ou `<img>`).
//  - Manipula√ß√£o de Eventos: Como o componente reage a a√ß√µes do usu√°rio (cliques, toques, mouse over,
//                            teclas pressionadas). Ex: `onClick`, `onMouseEnter`, `onKeyDown`.
//  - Acessibilidade (a11y): Tornar a p√°gina utiliz√°vel por todos, incluindo pessoas com defici√™ncias,
//                           usando atributos como `aria-label`, `aria-pressed`, `role`, `tabIndex`.
// =================================================================================================

// --- 1. IMPORTA√á√ïES DE M√ìDULOS, COMPONENTES E FUN√á√ïES ---
// Come√ßamos trazendo as "ferramentas" e "pe√ßas" que vamos precisar.
import React, { useState, useEffect, useMemo, useCallback } from "react";
// - `React`: A biblioteca principal do React, essencial para tudo.
// - `useState`, `useEffect`, `useMemo`, `useCallback`: S√£o "Hooks" do React.
//   Hooks s√£o fun√ß√µes especiais que nos permitem "enganchar" funcionalidades do React
//   (como estado e ciclo de vida) em nossos componentes funcionais.

// Importamos nosso componente `MapComponent`, que criamos para mostrar o mapa.
import MapComponent from "./MapComponent";

// Importamos fun√ß√µes "utilit√°rias" (ajudantes) do nosso arquivo de dados `animalData.js`.
// - `get`: Uma fun√ß√£o que nos ajuda a pegar valores de dentro de objetos de forma segura.
//          Se a propriedade n√£o existir, ela pode retornar um valor padr√£o que especificamos,
//          evitando erros de "undefined".
// - `getExtinctionHexColor`: Uma fun√ß√£o que retorna o c√≥digo de cor hexadecimal (ex: "#FF0000")
//                           correspondente a um status de extin√ß√£o (ex: "CR" para Criticamente em Perigo).
import { get, getExtinctionHexColor } from "../data/animalData";

// Importamos o objeto `styles` do nosso arquivo CSS Module (`AnimalDetail.module.css`).
// Isso nos d√° acesso √†s classes CSS que definimos l√° (ex: `styles.detailContainer`)
// de forma que elas s√≥ se apliquem a ESTE componente, evitando conflitos com outros.
import styles from "./AnimalDetail.module.css";

// --- 2. COMPONENTE AUXILIAR INTERNO: DetailSectionContent ---
// ALUNOS: √Äs vezes, dentro de um componente grande, temos pedacinhos de JSX que se repetem
// com pequenas varia√ß√µes. Para n√£o repetir c√≥digo (princ√≠pio DRY - Don't Repeat Yourself),
// podemos criar pequenos "componentes auxiliares" DENTRO do mesmo arquivo.
// Este `DetailSectionContent` √© um exemplo. Ele padroniza como cada se√ß√£o de informa√ß√£o
// (Habitat, Ecologia, etc.) √© exibida, incluindo um t√≠tulo, um √≠cone opcional,
// e uma mensagem padr√£o se n√£o houver conte√∫do.
//
// Props que este componente espera receber:
//  - `title`: (String obrigat√≥ria) O t√≠tulo da se√ß√£o (ex: "Habitat").
//  - `children`: (JSX obrigat√≥rio) O conte√∫do principal da se√ß√£o. Esta √© uma prop especial do React!
//                Tudo que voc√™ colocar ENTRE as tags de abertura e fechamento
//                `<DetailSectionContent> ... AQUI DENTRO ... </DetailSectionContent>`
//                ser√° passado automaticamente como `children`.
//  - `icon`: (String, opcional, valor padr√£o √© "") Um emoji ou caractere para ser exibido antes do t√≠tulo.
//  - `condition`: (Boolean, opcional, valor padr√£o √© `true`) Se esta condi√ß√£o for `false`,
//                 a se√ß√£o n√£o renderizar√° seu `children`, mostrando apenas a mensagem de
//                 "Informa√ß√£o n√£o dispon√≠vel". √ötil se uma se√ß√£o inteira depende de um dado existir.
const DetailSectionContent = ({
  title, // O t√≠tulo que vai aparecer na se√ß√£o
  children, // O conte√∫do principal que vai dentro da se√ß√£o
  icon = "üìÑ", // Um √≠cone emoji padr√£o (documento), se nenhum for passado
  condition = true, // Por padr√£o, a se√ß√£o √© mostrada se tiver conte√∫do
}) => {
  // Vamos descobrir se o `children` (conte√∫do) que recebemos √© "vazio" ou n√£o utiliz√°vel.
  let conteudoConsideradoVazio = false;
  if (
    children === null || // Se o children for explicitamente `null`
    children === undefined || // Ou se for `undefined`
    children === "N/A" || // Ou se for a string "N/A" (que usamos como padr√£o para dados ausentes)
    (Array.isArray(children) && children.length === 0) || // Ou se for um array sem nenhum item
    (typeof children === "object" && // Ou se for um objeto...
      !React.isValidElement(children) && // ...que N√ÉO seja um elemento React v√°lido (como <p> ou outro componente)...
      children !== null && // ...e que n√£o seja null (j√° coberto acima, mas para clareza)...
      Object.keys(children).length === 0) // ...e que N√ÉO tenha nenhuma propriedade pr√≥pria (um objeto vazio como {}).
  ) {
    conteudoConsideradoVazio = true; // Se alguma dessas condi√ß√µes for verdade, o conte√∫do √© "vazio".
  }

  // Agora, decidimos o que mostrar:
  // Se a `condition` (prop opcional) for `false`, OU se o `conteudoConsideradoVazio` for `true`...
  if (!condition || conteudoConsideradoVazio) {
    // ...ent√£o, mostramos o t√≠tulo da se√ß√£o e uma mensagem padr√£o.
    return (
      <div className={styles.detailSection}>
        {" "}
        {/* Container da se√ß√£o com estilo */}
        <h2 className={styles.sectionTitle}>
          {" "}
          {/* T√≠tulo da se√ß√£o com estilo */}
          {icon /* Renderiza o √≠cone SOMENTE SE a prop `icon` foi fornecida E n√£o √© uma string vazia */ && (
            <span
              className={styles.icon} // Classe para estilizar o √≠cone
              role="img" // Diz aos leitores de tela que isso √© uma imagem/emoji
              aria-label={title.toLowerCase()} // Descreve o √≠cone para leitores de tela (ex: "habitat")
            >
              {icon} {/* O caractere do √≠cone/emoji */}
            </span>
          )}
          {title} {/* O texto do t√≠tulo da se√ß√£o */}
        </h2>
        {/* Mensagem padr√£o para quando n√£o h√° conte√∫do para mostrar nesta se√ß√£o. */}
        <p className={styles.textMuted}>
          Informa√ß√£o n√£o dispon√≠vel para esta se√ß√£o.
        </p>
      </div>
    );
  }

  // CASO CONTR√ÅRIO (ou seja, `condition` √© `true` E o conte√∫do N√ÉO √© vazio)...
  // ...renderizamos a se√ß√£o normalmente, com seu t√≠tulo e o conte√∫do (`children`) que foi passado.
  return (
    <div className={styles.detailSection}>
      <h2 className={styles.sectionTitle}>
        {icon && (
          <span
            className={styles.icon}
            role="img"
            aria-label={title.toLowerCase()}
          >
            {icon}
          </span>
        )}
        {title}
      </h2>
      {children}{" "}
      {/* AQUI √© onde o conte√∫do principal da se√ß√£o (passado como children) √© renderizado! */}
    </div>
  );
};

// --- 3. MAPA PARA EXIBI√á√ÉO AMIG√ÅVEL DE NOMES DE IDIOMAS ---
// Este objeto JavaScript funciona como um pequeno "dicion√°rio".
// Ele nos ajuda a traduzir os c√≥digos de idioma (que v√™m dos nossos dados, ex: "pt", "en")
// para nomes que as pessoas entendem melhor (ex: "Portugu√™s (Brasil)", "Ingl√™s (English)").
// Usaremos isso quando formos listar os "Nomes Comuns em outros idiomas" do animal.
const languageDisplayMap = {
  pt: "Portugu√™s (Brasil)", // Poder√≠amos ser mais espec√≠ficos com pt-BR, pt-PT, etc.
  en: "Ingl√™s (English)",
  es: "Espanhol (Espa√±ol)",
  fr: "Franc√™s (Fran√ßais)", // Exemplo, voc√™ pode adicionar mais conforme os idiomas nos seus dados
  de: "Alem√£o (Deutsch)", // Exemplo
  // ALUNOS: Se os seus dados de animais tiverem nomes comuns em outros idiomas
  // (ex: japon√™s "ja", italiano "it"), voc√™s adicionariam as "tradu√ß√µes" aqui!
};

// --- 4. DEFINI√á√ÉO DO COMPONENTE PRINCIPAL 'AnimalDetail' ---
// Chegamos ao nosso componente principal desta p√°gina!
// Ele recebe duas `props` (propriedades) importantes do seu componente "pai" (o App.js):
//  - `animal`: Um OBJETO JavaScript contendo TODOS os dados do animal que foi selecionado
//              na lista principal (nome, imagens, habitat, etc.).
//  - `onBack`: Uma FUN√á√ÉO. Quando o usu√°rio clicar no bot√£o "Voltar √† Lista", esta fun√ß√£o
//              (que foi definida l√° no App.js) ser√° chamada. Ela geralmente avisa o App.js
//              para "limpar" o animal selecionado, fazendo a lista de animais reaparecer.
const AnimalDetail = ({ animal, onBack }) => {
  // --- A. GERENCIAMENTO DE ESTADO INTERNO DO COMPONENTE (Mem√≥ria do AnimalDetail) ---
  // `useState` √© um Hook do React que nos permite adicionar "estado" (vari√°veis que o React
  // vai "lembrar" e que, quando mudam, fazem o componente re-renderizar) aos nossos
  // componentes funcionais.

  // Estado para controlar o LIGHTBOX (o visualizador de imagem ampliada que cobre a tela).
  // `lightboxInfo` √© um objeto que guarda duas coisas:
  //   - `index`: O n√∫mero (√≠ndice) da imagem que est√° atualmente sendo mostrada no lightbox.
  //              Come√ßa com -1, que para n√≥s significa "lightbox est√° fechado".
  //   - `images`: Um array (lista) contendo as URLs (endere√ßos web) de TODAS as imagens
  //               que podem ser vistas no lightbox (geralmente, as imagens da galeria do animal).
  // `definirLightboxInfo` √© a fun√ß√£o que usamos para ATUALIZAR essas informa√ß√µes do lightbox.
  const [lightboxInfo, definirLightboxInfo] = useState({
    index: -1, // Lightbox come√ßa fechado
    images: [], // Lista de imagens do lightbox come√ßa vazia
  });

  // Estado para controlar se o "tazo" (o card redondo com a imagem do animal que vira)
  // que aparece no cabe√ßalho desta p√°gina de detalhes est√° MOSTRANDO O VERSO ou A FRENTE.
  // `tazoCabecalhoVirado` ser√° `true` se o tazo estiver mostrando o verso, e `false` se estiver
  // mostrando a frente.
  // Come√ßa como `false` (mostrando a frente do tazo por padr√£o).
  // `definirTazoCabecalhoVirado` √© a fun√ß√£o para mudar esse estado (virar o tazo).
  const [tazoCabecalhoVirado, definirTazoCabecalhoVirado] = useState(false);

  // --- B. MEMORIZA√á√ÉO DO C√ÅLCULO DAS IMAGENS DA GALERIA (`useMemo`) ---
  // ALUNOS: `useMemo` √© um Hook de OTIMIZA√á√ÉO!
  // A fun√ß√£o que passamos para `useMemo` (a primeira parte, antes da v√≠rgula)
  // pode ser um c√°lculo "caro" ou demorado. `useMemo` "memoriza" (guarda na mem√≥ria)
  // o RESULTADO desse c√°lculo.
  // A fun√ß√£o s√≥ √© RE-EXECUTADA (o c√°lculo s√≥ √© refeito) se alguma das "depend√™ncias"
  // (as coisas listadas no array `[animal]` no final) mudar.
  //
  // NO NOSSO CASO: Estamos montando a lista de URLs para as imagens da galeria.
  // Esse processo envolve pegar dados do objeto `animal`, verificar se s√£o v√°lidos,
  // garantir que n√£o haja URLs duplicadas, etc.
  // Este c√°lculo s√≥ precisa ser feito novamente se o `animal` (a prop que recebemos) MUDAR
  // (ou seja, se estivermos mostrando detalhes de um animal diferente).
  // Se o componente `AnimalDetail` re-renderizar por outros motivos (ex: o usu√°rio
  // virou o tazo, o que muda o estado `tazoCabecalhoVirado`), `imagensDaGaleria` N√ÉO ser√°
  // recalculado desnecessariamente. O React usar√° o valor que `useMemo` guardou.
  // Isso pode deixar nossa aplica√ß√£o um pouquinho mais r√°pida!
  const imagensDaGaleria = useMemo(() => {
    // Para depura√ß√£o, voc√™ pode adicionar um console.log aqui para ver QUANDO este c√°lculo √© refeito:
    // console.log("useMemo: Calculando 'imagensDaGaleria' para o animal:", animal?.nome_tazo);

    // Se, por algum motivo, n√£o recebermos dados do `animal` ou se o `animal` n√£o tiver
    // a propriedade `imagens`, retornamos uma lista vazia para evitar erros.
    if (!animal || !animal.imagens) {
      return [];
    }

    // Usamos um `Set` para garantir que cada URL de imagem seja √öNICA na galeria.
    // `Set` √© uma estrutura de dados em JavaScript que s√≥ permite valores √∫nicos.
    // Isso evita que a mesma imagem apare√ßa duas vezes na galeria se, por acaso,
    // ela estiver duplicada nos dados do animal.
    const urlsUnicas = new Set();
    const imagensOrdenadasParaGaleria = []; // Este ser√° nosso array final de URLs.

    // Criamos uma pequena fun√ß√£o "ajudante" (helper function) aqui dentro.
    // Ela vai adicionar uma URL de imagem √† nossa lista, mas S√ì SE a URL for v√°lida
    // (n√£o nula, uma string, n√£o vazia) e se ainda n√£o tiver sido adicionada.
    const adicionarImagemSeValida = (url) => {
      if (
        url && // A URL existe (n√£o √© null, undefined, etc.)?
        typeof url === "string" && // √â do tipo string?
        url.trim() !== "" && // N√£o √© uma string vazia (ap√≥s remover espa√ßos em branco das pontas)?
        !urlsUnicas.has(url) // J√° N√ÉO est√° no nosso `Set` de URLs √∫nicas?
      ) {
        urlsUnicas.add(url); // Se passou em todos os testes, adiciona ao `Set` para marcar como j√° vista.
        imagensOrdenadasParaGaleria.push(url); // E adiciona ao nosso array final.
      }
    };

    // Agora, tentamos adicionar as imagens que esperamos encontrar nos dados do animal.
    // Usamos nossa fun√ß√£o `get` (importada de `animalData.js`) para buscar essas URLs
    // de forma segura dentro do objeto `animal.imagens`.
    // Se `animal.imagens.foto_1` n√£o existir, `get` retornar√° uma string vazia `""`
    // (o terceiro argumento de `get`), e nossa fun√ß√£o `adicionarImagemSeValida` n√£o a adicionar√°.
    adicionarImagemSeValida(get(animal, "imagens.foto_1", ""));
    adicionarImagemSeValida(get(animal, "imagens.foto_2", ""));

    // ALUNOS: Se a estrutura dos seus dados de animais (`animalData.js`) tivesse
    // mais campos para imagens da galeria (ex: `foto_3`, `foto_ambiente`, etc.),
    // voc√™s adicionariam mais chamadas a `adicionarImagemSeValida` aqui!
    // Exemplo:
    // adicionarImagemSeValida(get(animal, "imagens.foto_adicional_1", ""));
    // adicionarImagemSeValida(get(animal, "imagens.mapa_distribuicao_img", "")); // Se o mapa tamb√©m fosse uma imagem

    return imagensOrdenadasParaGaleria; // Retorna o array final com as URLs das imagens da galeria.
  }, [animal]); // Array de depend√™ncias do `useMemo`:
  // Esta fun√ß√£o de c√°lculo S√ì SER√Å RE-EXECUTADA se o valor da prop `animal` mudar.

  // --- C. FUN√á√ïES PARA CONTROLAR O LIGHTBOX (VISUALIZADOR DE IMAGENS AMPLIADAS) ---
  // Envolvemos estas fun√ß√µes com `useCallback` para otimiza√ß√£o, pois elas s√£o
  // chamadas por eventos de clique e uma delas (`fecharLightbox`) √© usada no `useEffect`
  // da tecla Escape. `useCallback` retorna uma vers√£o "memoizada" da fun√ß√£o, que s√≥ √©
  // recriada se suas depend√™ncias mudarem.

  // Fun√ß√£o para ABRIR o lightbox.
  // √â chamada quando o usu√°rio clica em uma imagem da galeria OU no tazo do cabe√ßalho.
  // `urlDaImagemClicada`: A URL da imagem que o usu√°rio realmente clicou.
  const abrirImagemNoLightbox = useCallback(
    (urlDaImagemClicada) => {
      // Primeiro, tentamos encontrar o √≠ndice (a posi√ß√£o) da imagem clicada dentro da
      // nossa lista de imagens da galeria (`imagensDaGaleria`).
      // `findIndex` retorna o √≠ndice do primeiro elemento que satisfaz a condi√ß√£o, ou -1 se n√£o encontrar.
      const indiceDaImagemNaGaleria = imagensDaGaleria.findIndex(
        (url) => url === urlDaImagemClicada
      );

      if (indiceDaImagemNaGaleria !== -1) {
        // Se a imagem clicada FAZ PARTE da galeria (`indiceDaImagemNaGaleria` n√£o √© -1)...
        // ...configuramos o lightbox para come√ßar mostrando essa imagem
        // e disponibilizamos TODAS as imagens da galeria para navega√ß√£o (pr√≥xima/anterior).
        definirLightboxInfo({
          index: indiceDaImagemNaGaleria, // O √≠ndice da imagem clicada.
          images: imagensDaGaleria, // O array completo de imagens da galeria.
        });
      } else if (
        urlDaImagemClicada &&
        typeof urlDaImagemClicada === "string" &&
        urlDaImagemClicada.trim() !== ""
      ) {
        // Se a imagem clicada N√ÉO est√° na galeria (ex: pode ser uma das imagens do tazo
        // do cabe√ßalho que n√£o necessariamente repetimos na galeria)...
        // ...abrimos o lightbox mostrando APENAS essa imagem espec√≠fica.
        // Nesse caso, a navega√ß√£o (bot√µes pr√≥xima/anterior) n√£o far√° sentido
        // (ou n√£o estar√° dispon√≠vel, dependendo de como implementarmos o lightbox no JSX).
        definirLightboxInfo({
          index: 0, // Como s√≥ temos uma imagem, o √≠ndice dela √© 0.
          images: [urlDaImagemClicada], // O array de imagens do lightbox cont√©m APENAS a imagem clicada.
        });
      }
      // Se `urlDaImagemClicada` for inv√°lida (nula, vazia, etc.), n√£o fazemos nada e o lightbox n√£o abre.
    },
    [imagensDaGaleria]
  ); // Depend√™ncia: `imagensDaGaleria`. Se esta lista mudar, a fun√ß√£o `abrirImagemNoLightbox`
  // ser√° recriada para usar a nova lista.

  // Fun√ß√£o para FECHAR o lightbox.
  // √â chamada quando o usu√°rio clica no "backdrop" (fundo escuro) do lightbox,
  // no bot√£o de fechar (X), ou (como veremos no `useEffect`) pressiona a tecla 'Escape'.
  const fecharLightbox = useCallback(() => {
    // Para fechar, simplesmente resetamos o estado `lightboxInfo` para seus valores iniciais:
    // `index: -1` (que para n√≥s significa "fechado") e `images: []` (lista de imagens vazia).
    definirLightboxInfo({ index: -1, images: [] });
  }, []); // Sem depend√™ncias, pois esta fun√ß√£o n√£o usa nada de fora que possa mudar.

  // Fun√ß√£o para navegar para a PR√ìXIMA imagem no lightbox.
  // O argumento `e` √© o objeto do evento de clique (precisamos dele para `e.stopPropagation()`).
  const proximaImagemLightbox = useCallback((e) => {
    // `e.stopPropagation()` √© importante aqui!
    // Se n√£o o usarmos, o clique neste bot√£o "Pr√≥xima" poderia "borbulhar" (propagar)
    // para o elemento pai (`.lightboxBackdrop`), que tem um `onClick` para FECHAR o lightbox.
    // N√£o queremos que clicar em "Pr√≥xima" feche o lightbox!
    e.stopPropagation();

    // Para atualizar o estado `lightboxInfo`, usamos a forma funcional de `definirLightboxInfo`.
    // `estadoAnterior` nos d√° acesso ao valor ATUAL de `lightboxInfo` antes desta atualiza√ß√£o.
    // Isso √© mais seguro do que usar `lightboxInfo.index` diretamente aqui, especialmente
    // se houver m√∫ltiplas atualiza√ß√µes de estado "na fila".
    definirLightboxInfo((estadoAnterior) => ({
      ...estadoAnterior, // Primeiro, copiamos todas as outras propriedades do estado anterior (como o array `images`).
      // Agora, calculamos o novo `index` para a pr√≥xima imagem:
      // `(estadoAnterior.index + 1)` pega o pr√≥ximo √≠ndice.
      // `% estadoAnterior.images.length` (operador "m√≥dulo" ou "resto da divis√£o")
      // faz com que, se chegarmos ao final da lista de imagens (ex: √≠ndice 4 em uma lista de 5 imagens,
      // onde o √∫ltimo √≠ndice √© 4), o pr√≥ximo √≠ndice (4+1=5) ao ser dividido pelo tamanho (5)
      // d√™ resto 0. Isso faz o √≠ndice "voltar" para o come√ßo da lista (√≠ndICE 0),
      // criando um efeito de carrossel/loop.
      index: (estadoAnterior.index + 1) % estadoAnterior.images.length,
    }));
  }, []); // Sem depend√™ncias, pois s√≥ usa o estado anterior.

  // Fun√ß√£o para navegar para a imagem ANTERIOR no lightbox.
  const imagemAnteriorLightbox = useCallback((e) => {
    e.stopPropagation(); // Impede que o clique no bot√£o "Anterior" feche o lightbox.
    definirLightboxInfo((estadoAnterior) => ({
      ...estadoAnterior,
      // Calcula o √≠ndice anterior com efeito de carrossel:
      // `(estadoAnterior.index - 1 + estadoAnterior.images.length)`:
      //   Se `index` √© 0, `0 - 1` √© `-1`. Somar `images.length` (ex: 5) resulta em `4`.
      //   Ent√£o, `4 % 5` d√° `4`, que √© o √∫ltimo √≠ndice da lista.
      // Se `index` √© 3, `3 - 1` √© `2`. `2 + 5` √© `7`. `7 % 5` d√° `2`.
      index:
        (estadoAnterior.index - 1 + estadoAnterior.images.length) %
        estadoAnterior.images.length,
    }));
  }, []); // Sem depend√™ncias.

  // --- D. EFEITO COLATERAL (`useEffect`) PARA OUVIR A TECLA 'ESCAPE' E FECHAR O LIGHTBOX ---
  // ALUNOS: `useEffect` √© para quando precisamos interagir com coisas FORA do React,
  // como o navegador (adicionar/remover event listeners), fazer chamadas de API, etc.
  // Este `useEffect` espec√≠fico vai adicionar um "escutador de eventos" (event listener)
  // ao DOCUMENTO INTEIRO. Ele vai "ouvir" por qualquer tecla pressionada.
  // Se a tecla for "Escape", ele fecha o lightbox.
  useEffect(() => {
    // Esta √© a fun√ß√£o que ser√° chamada TODA VEZ que uma tecla for pressionada no documento.
    const lidarComTeclaEsc = (evento) => {
      // `evento.key` nos diz qual tecla foi pressionada.
      if (evento.key === "Escape") {
        fecharLightbox(); // Se for "Escape", chamamos nossa fun√ß√£o para fechar o lightbox.
      }
    };

    // S√ì queremos "escutar" pela tecla Escape SE o lightbox estiver ABERTO.
    // Verificamos isso checando se `lightboxInfo.index` √© diferente de -1 (nosso sinal de fechado).
    if (lightboxInfo.index !== -1) {
      // Se o lightbox est√° aberto, ADICIONAMOS o event listener ao `document`.
      // Ele vai escutar pelo evento `keydown` (tecla pressionada).
      document.addEventListener("keydown", lidarComTeclaEsc);
      // Para depura√ß√£o, voc√™ pode ver no console quando o listener √© adicionado:
      // console.log("useEffect: Event listener para 'Esc' ADICIONADO.");
    }

    // A FUN√á√ÉO DE LIMPEZA (Cleanup Function)! ESSA PARTE √â SUPER IMPORTANTE!
    // O `useEffect` pode retornar uma fun√ß√£o. Essa fun√ß√£o (chamada de "cleanup")
    // ser√° executada pelo React:
    //  1. ANTES que o efeito seja executado novamente (se uma de suas depend√™ncias mudar).
    //  2. QUANDO o componente `AnimalDetail` for "desmontado" (removido da tela).
    // AQUI, nossa limpeza REMOVE o event listener que adicionamos.
    // POR QU√ä? Se n√£o removermos, podemos ter "vazamentos de mem√≥ria" (memory leaks)
    // ou o listener pode ser adicionado v√°rias vezes, causando comportamentos estranhos.
    // √â como arrumar a bagun√ßa depois da festa!
    return () => {
      document.removeEventListener("keydown", lidarComTeclaEsc);
      // console.log("useEffect: Event listener para 'Esc' REMOVIDO.");
    };

    // Array de depend√™ncias do `useEffect`: `[lightboxInfo.index, fecharLightbox]`
    // O React vai re-executar este efeito (ou seja, a l√≥gica de adicionar/remover o listener)
    // SOMENTE se o valor de `lightboxInfo.index` OU a fun√ß√£o `fecharLightbox` mudar.
    // - `lightboxInfo.index`: Garante que o listener s√≥ seja adicionado/removido quando o lightbox abre/fecha.
    // - `fecharLightbox`: Como `fecharLightbox` √© memoizada com `useCallback` e n√£o tem depend√™ncias,
    //   ela n√£o mudar√°. Mas √© uma boa pr√°tica incluir fun√ß√µes chamadas dentro do efeito
    //   no array de depend√™ncias, especialmente se elas pudessem mudar.
  }, [lightboxInfo.index, fecharLightbox]); // Adicionamos fecharLightbox como depend√™ncia.

  // --- E. VERIFICA√á√ÉO DE DADOS DO ANIMAL (GUARDA DE SEGURAN√áA) ---
  // Se, por algum motivo MUITO estranho, o componente `AnimalDetail` for renderizado
  // mas a prop `animal` (que deveria conter os dados do animal) for `null` ou `undefined`,
  // n√£o podemos continuar, pois daria erro ao tentar acessar `animal.nome_tazo`, etc.
  // Ent√£o, exibimos uma mensagem de erro e paramos a renderiza√ß√£o do restante.
  if (!animal) {
    // Idealmente, o componente `App.js` (que √© o pai) j√° deveria garantir que `animal`
    // sempre tenha dados v√°lidos antes de decidir renderizar o `AnimalDetail`.
    // Mas ter essa verifica√ß√£o aqui √© uma "pr√°tica defensiva" ‚Äì uma seguran√ßa extra.
    return (
      <p className="error-message">
        Erro cr√≠tico: Dados do animal n√£o foram fornecidos para a p√°gina de
        detalhes.
      </p>
    );
  }

  // --- F. EXTRA√á√ÉO DE DADOS DO ANIMAL PARA USO MAIS F√ÅCIL NO JSX ---
  // Agora que sabemos que temos o objeto `animal`, vamos pegar as informa√ß√µes espec√≠ficas
  // que queremos mostrar na p√°gina. Guardamos em vari√°veis com nomes mais curtos e claros.
  // Usar nossa fun√ß√£o `get(objeto, 'caminho.da.propriedade', valorPadrao)` torna o c√≥digo
  // mais robusto, pois se uma propriedade n√£o existir, ela retorna o `valorPadrao`
  // em vez de dar um erro de "cannot read property of undefined".

  // Informa√ß√µes sobre o N√≠vel de Extin√ß√£o:
  const objetoNivelExtincao = get(animal, "nivel_extincao", {}); // Pega o objeto inteiro para evitar m√∫ltiplas chamadas `get` no mesmo n√≠vel.
  const categoriaExtincao = get(objetoNivelExtincao, "categoria", "N/A"); // Ex: "LC", "EN", "CR"
  const descricaoExtincao = get(
    objetoNivelExtincao,
    "descricao",
    "N√£o Avaliado"
  ); // Ex: "Pouco Preocupante"
  const corDoStatusHex = getExtinctionHexColor(categoriaExtincao); // Pega a cor hexadecimal (ex: "#aed581")
  // Garante que `escalaExtincao` seja sempre um array. Se `get` retornar "N/A" ou algo que n√£o seja array, usa `[]`.
  const escalaExtincao = Array.isArray(get(objetoNivelExtincao, "escala", []))
    ? get(objetoNivelExtincao, "escala", [])
    : [];

  // URLs das imagens do Tazo para o cabe√ßalho da p√°gina de detalhes.
  // Se a imagem n√£o existir, `get` retorna uma string vazia `""`, o que facilita
  // verificar depois no JSX se devemos ou n√£o tentar renderizar a imagem.
  const tazoFrontUrl = get(animal, "imagens.front", "");
  const tazoBackUrl = get(animal, "imagens.back", "");

  // Nomes principais do animal (para o t√≠tulo da p√°gina).
  const nomeComumPrincipal = get(animal, "nome_tazo", "Nome Indispon√≠vel");
  const nomeCientificoPrincipal = get(
    animal,
    "nome_cientifico",
    "Nome Cient√≠fico Indispon√≠vel"
  );

  // Prepara a lista de Nomes Comuns em outros idiomas para exibi√ß√£o.
  const nomesComunsEmOutrosIdiomasRaw = get(animal, "nome_comum", {}); // Esperamos um objeto como {pt: "...", en: "..."}
  const nomesComunsParaExibicao = {}; // Vamos criar um novo objeto para armazenar os nomes formatados.

  // Verifica se `nomesComunsEmOutrosIdiomasRaw` √© realmente um objeto e n√£o nulo.
  if (
    typeof nomesComunsEmOutrosIdiomasRaw === "object" &&
    nomesComunsEmOutrosIdiomasRaw !== null
  ) {
    // Itera sobre as chaves (que s√£o os c√≥digos de idioma, como "pt", "en") do objeto.
    for (const codigoIdioma in nomesComunsEmOutrosIdiomasRaw) {
      // `hasOwnProperty` √© uma verifica√ß√£o de seguran√ßa. Garante que estamos olhando apenas para
      // propriedades que pertencem DIRETAMENTE ao objeto `nomesComunsEmOutrosIdiomasRaw`,
      // e n√£o para propriedades que ele possa ter "herdado" de seu "prot√≥tipo"
      // (um conceito mais avan√ßado de JavaScript, mas √© uma boa pr√°tica usar).
      if (nomesComunsEmOutrosIdiomasRaw.hasOwnProperty(codigoIdioma)) {
        const nomeNesteIdioma = nomesComunsEmOutrosIdiomasRaw[codigoIdioma]; // Pega o nome no idioma atual.
        // S√≥ adicionamos √† nossa lista de exibi√ß√£o se o nome for v√°lido (existir) e n√£o for a string "N/A".
        if (nomeNesteIdioma && nomeNesteIdioma !== "N/A") {
          // Usa nosso `languageDisplayMap` para obter um nome de idioma amig√°vel (ex: "Portugu√™s (Brasil)").
          // Se o c√≥digo do idioma (ex: "ja" para japon√™s) n√£o estiver no nosso mapa,
          // usamos o pr√≥prio c√≥digo em letras mai√∫sculas como um "fallback" (plano B).
          const nomeAmigavelDoIdioma =
            languageDisplayMap[codigoIdioma] || codigoIdioma.toUpperCase();

          // √Äs vezes, o nome para um idioma pode ser uma lista (array) de nomes.
          // Se for um array, juntamos os nomes com uma v√≠rgula e espa√ßo (ex: "Lobo, Lobo Cinzento").
          // Sen√£o, usamos o nome como est√° (se for uma string simples).
          nomesComunsParaExibicao[nomeAmigavelDoIdioma] = Array.isArray(
            nomeNesteIdioma
          )
            ? nomeNesteIdioma.join(", ")
            : nomeNesteIdioma;
        }
      }
    }
  }

  // Fun√ß√£o auxiliar interna (helper function) para renderizar listas simples de itens (array de strings).
  // Usaremos para se√ß√µes como "Amea√ßas", "Curiosidades".
  // `items`: o array de strings que queremos listar.
  // `iconeDoItem`: um emoji ou string para colocar antes de cada item da lista (opcional).
  // Envolvemos com `useCallback` pois, embora n√£o seja estritamente necess√°rio aqui (j√° que
  // n√£o √© passada como prop nem usada em `useEffect` diretamente), √© um bom h√°bito para fun√ß√µes
  // que retornam JSX e podem ser chamadas m√∫ltiplas vezes. Se ela fizesse c√°lculos mais
  // complexos baseados em props/estado, `useCallback` seria mais ben√©fico.
  const renderizarListaDeItensSimples = useCallback(
    (items, iconeDoItem = "üîπ") => {
      // Se `items` n√£o for um array, ou se o array estiver vazio,
      // ou se o √∫nico item do array for "N/A" ou uma string vazia...
      // ...consideramos que n√£o h√° dados v√°lidos para listar. Retornamos `null`.
      // Quando `null` √© retornado, o componente `DetailSectionContent` (que chama esta fun√ß√£o)
      // saber√° que deve mostrar a mensagem padr√£o "Informa√ß√£o n√£o dispon√≠vel".
      if (
        !Array.isArray(items) ||
        items.length === 0 ||
        (items.length === 1 && (!items[0] || items[0] === "N/A"))
      ) {
        return null;
      }
      // Se houver itens v√°lidos, usamos o m√©todo `.map()` dos arrays.
      // `.map()` passa por CADA item do array `items` e executa uma fun√ß√£o para cada um.
      // Essa fun√ß√£o deve retornar um elemento JSX (no nosso caso, um `<li>`).
      // O resultado final de `.map()` √© um NOVO array contendo todos esses elementos JSX.
      return (
        <ul className={styles.list}>
          {" "}
          {/* Uma lista n√£o ordenada `<ul>` com estilo. */}
          {items.map((item, index) => (
            // `key={index}`: IMPORTANTE! Quando o React renderiza uma lista de elementos,
            // ele precisa de uma "chave" (`key`) √∫nica para cada item, para poder identificar
            // e atualizar os itens de forma eficiente se a lista mudar.
            // Usar o `index` do array como chave S√ì √© seguro se a ORDEM dos itens na lista
            // NUNCA mudar e se itens n√£o forem ADICIONADOS ou REMOVIDOS do MEIO da lista.
            // Se os itens tivessem um ID √∫nico vindo dos dados, seria MELHOR usar esse ID.
            // Ex: `key={item.id}`. Para listas simples e est√°ticas, `index` pode ser aceit√°vel.
            <li key={index} className={styles.listItem}>
              {" "}
              {/* Cada item da lista com estilo. */}
              {iconeDoItem && ( // Se um `iconeDoItem` foi fornecido...
                // ...renderiza o √≠cone dentro de um `<span>` para estilo e acessibilidade.
                <span className={styles.icon} role="img" aria-hidden="true">
                  {iconeDoItem}
                </span>
              )}
              {item} {/* O texto do item da lista. */}
            </li>
          ))}
        </ul>
      );
    },
    []
  ); // Sem depend√™ncias, pois a fun√ß√£o n√£o usa nada do escopo do componente que muda.

  // Fun√ß√£o auxiliar interna para renderizar "listas de defini√ß√£o" (objetos chave-valor).
  // Usaremos para se√ß√µes como "Classifica√ß√£o Taxon√¥mica", "Ecologia", "Outros Nomes Comuns".
  // `dataObject`: o objeto JavaScript cujas propriedades (chaves e valores) queremos listar.
  const renderizarListaDeDefinicaoDetalhada = useCallback((dataObject) => {
    // Se `dataObject` n√£o for um objeto v√°lido ou se estiver vazio...
    if (
      !dataObject ||
      typeof dataObject !== "object" ||
      Object.keys(dataObject).length === 0
    ) {
      return null; // ...retornamos `null`, e `DetailSectionContent` mostrar√° a mensagem padr√£o.
    }
    // `Object.entries(dataObject)` transforma um objeto como `{ chave1: valor1, chave2: valor2 }`
    // em um array de arrays, onde cada subarray √© um par `[chave, valor]`.
    // Ex: `[ ['chave1', valor1], ['chave2', valor2] ]`.
    // Depois, usamos `.filter()` para manter apenas as entradas (pares chave-valor)
    // onde o `valorDaPropriedade` √© "significativo" (existe e n√£o √© a string "N/A").
    const entradasValidasDoObjeto = Object.entries(dataObject).filter(
      ([chaveDaPropriedade, valorDaPropriedade]) =>
        valorDaPropriedade && valorDaPropriedade !== "N/A"
    );

    // Se n√£o sobrar nenhuma entrada v√°lida ap√≥s o filtro, n√£o h√° o que mostrar.
    if (entradasValidasDoObjeto.length === 0) {
      return null;
    }

    // Usamos a tag HTML `<dl>` (definition list - lista de defini√ß√£o) para sem√¢ntica.
    // Ela √© ideal para listar pares de termos e suas defini√ß√µes.
    // Embora usemos `div`s para cada par para aplicar o estilo `.listItem`,
    // a estrutura `<dl>` -> `<dt>`(termo) `<dd>`(descri√ß√£o) √© semanticamente correta.
    return (
      <dl className={styles.list}>
        {" "}
        {/* Reutilizamos a classe .list para o espa√ßamento entre os itens. */}
        {entradasValidasDoObjeto.map(([chave, valor]) => (
          // Cada par chave-valor √© envolvido em uma `<div>` com a classe `.listItem` para estilo.
          // Usamos a `chave` como `key` aqui, assumindo que as chaves s√£o √∫nicas dentro do objeto.
          <div key={chave} className={styles.listItem}>
            {/* `<dt>` (definition term) √© usado para a "chave" ou nome da propriedade. */}
            <dt className={styles.definitionListDt}>
              {/* Formatamos a chave para ficar mais bonita:
                  - `replace(/_/g, " ")`: Troca todos os underscores `_` por espa√ßos.
                  - `replace(/\b\w/g, letra => letra.toUpperCase())`: Capitaliza a primeira letra
                                                                    de cada palavra. */}
              {chave
                .replace(/_/g, " ")
                .replace(/\b\w/g, (letra) => letra.toUpperCase())}
              :
            </dt>
            {/* `<dd>` (definition description) √© usado para o "valor" da propriedade. */}
            {/* Convertemos o `valor` para `String()` para garantir que ele possa ser renderizado,
                mesmo que seja um n√∫mero ou booleano. */}
            <dd className={styles.definitionListDd}>{String(valor)}</dd>
          </div>
        ))}
      </dl>
    );
  }, []); // Sem depend√™ncias.

  // --- G. NOVA FUN√á√ÉO HANDLER PARA O CLIQUE/TOQUE NO TAZO ---
  // ALUNOS: Esta √© a fun√ß√£o que faz a m√°gica acontecer quando o usu√°rio
  // CLICA (com mouse) ou TOCA (em celular/tablet) no tazo!
  // Ela vai fazer DUAS coisas:
  //  1. VIRAR o tazo (mostrar a outra face).
  //  2. ABRIR a imagem que ficou vis√≠vel no tazo (seja frente ou verso) no LIGHTBOX.
  // Envolvemos com `useCallback` para otimiza√ß√£o.
  // Suas depend√™ncias s√£o `tazoCabecalhoVirado` (porque a l√≥gica de qual imagem abrir
  // depende se o tazo estava virado ANTES do clique), `tazoFrontUrl`, `tazoBackUrl`
  // (as URLs das imagens), e `abrirImagemNoLightbox` (a fun√ß√£o que chamamos).
  const lidarComInteracaoNoTazo = useCallback((evento) => {
    // `evento.stopPropagation()`: Como antes, impede que o clique/toque "vaze"
    // para elementos pais e acione outros handlers acidentalmente.
    // Essencial para garantir que s√≥ o tazo reaja a esta intera√ß√£o espec√≠fica.
    if (evento) evento.stopPropagation();

    // A√á√ÉO √öNICA: VIRAR O TAZO (Alternar o estado `tazoCabecalhoVirado`)
    // Usamos a forma funcional de `definirTazoCabecalhoVirado` (passando uma fun√ß√£o
    // que recebe o estado anterior).
    // `estadoAnteriorVirado` representa o valor ATUAL de `tazoCabecalhoVirado` ANTES desta atualiza√ß√£o.
    // `!estadoAnteriorVirado` simplesmente INVERTE esse valor (se era `true` vira `false`, se era `false` vira `true`).
    // Esta √© a maneira mais segura e recomendada de atualizar um estado que depende do seu valor anterior.
    definirTazoCabecalhoVirado((estadoAnteriorVirado) => !estadoAnteriorVirado);

    // REMOVEMOS A PARTE QUE ABRIA O LIGHTBOX!
    // A l√≥gica anterior que calculava `imagemQueSeraVisivelAposFlip` e chamava
    // `abrirImagemNoLightbox()` foi removida daqui.

    // E √© s√≥ isso! Agora, clicar/tocar no tazo s√≥ faz ele virar. Simples e direto!
  }, []);

  // --- H. RENDERIZA√á√ÉO FINAL DO COMPONENTE AnimalDetail (O QUE APARECE NA TELA!) ---
  return (
    // Usamos um "Fragmento React" (`<>...</>`) aqui.
    // Um Fragmento nos permite agrupar m√∫ltiplos elementos JSX (como o `<article>` e o lightbox)
    // SEM adicionar um n√≥ `<div>` extra desnecess√°rio ao DOM (a estrutura HTML da p√°gina).
    // Todo componente React precisa retornar UM √öNICO elemento raiz. O Fragmento serve para isso.
    <>
      {/* O container principal da p√°gina de detalhes do animal.
          Usamos a tag sem√¢ntica `<article>` porque esta p√°gina representa um conte√∫do
          autocontido e distribu√≠vel (os detalhes de um animal). */}
      <article className={styles.detailContainer}>
        {/* Bot√£o para Voltar √† Lista */}
        <button
          onClick={onBack}
          className={styles.backButton}
          aria-label="Voltar para a lista de animais"
        >
          ‚¨ÖÔ∏è Voltar √† Lista
        </button>
        {/* Cabe√ßalho da P√°gina de Detalhes (cont√©m tazo, nome, status) */}
        <header
          className={styles.detailHeader}
          // Estilo Inline Din√¢mico:
          // A cor da borda inferior deste header muda de acordo com o status de extin√ß√£o do animal!
          // Passamos um objeto JavaScript para a prop `style`.
          // As chaves do objeto s√£o nomes de propriedades CSS em camelCase (ex: `borderBottomColor`).
          style={{
            borderBottomColor: corDoStatusHex, // `corDoStatusHex` foi calculada antes.
            borderBottomWidth: "5px",
            borderBottomStyle: "solid",
          }}
        >
          {/* L√≥gica para exibir o Tazo Interativo OU uma Imagem de Fallback */}
          {tazoFrontUrl || tazoBackUrl ? ( // Se existir URL para a frente OU para o verso do tazo...
            // ...ent√£o renderizamos o container do Tazo Interativo.
            <div
              className={styles.headerTazoContainer} // Estilo base do container do tazo.
              // --- EVENTOS DE MOUSE (Para DESKTOP - continuam funcionando) ---
              // Quando o mouse ENTRA na √°rea do tazo, vira para o verso.
              onMouseEnter={() => definirTazoCabecalhoVirado(true)}
              // Quando o mouse SAI da √°rea do tazo, volta para a frente.
              onMouseLeave={() => definirTazoCabecalhoVirado(false)}
              // --- EVENTOS DE FOCO (Para ACESSIBILIDADE via teclado - continuam funcionando) ---
              // Quando o tazo recebe FOCO (ex: usu√°rio navegou com a tecla Tab at√© ele).
              onFocus={() => definirTazoCabecalhoVirado(true)}
              // Quando o tazo PERDE o foco.
              onBlur={() => definirTazoCabecalhoVirado(false)}
              // --- EVENTO DE CLIQUE/TOQUE (Para TODOS os dispositivos) ---
              // AGORA, o `onClick` chama nosso novo handler `lidarComInteracaoNoTazo`.
              // Em dispositivos de TOQUE, um "tap" (toque r√°pido) geralmente dispara `onClick`.
              // Em dispositivos com MOUSE, um clique dispara `onClick`.
              // Esta fun√ß√£o vai:
              //   1. VIRAR o tazo (alternar `tazoCabecalhoVirado`).
              //   2. ABRIR a imagem (que ficou vis√≠vel ap√≥s o flip) no lightbox.
              onClick={lidarComInteracaoNoTazo}
              // --- EVENTO DE TECLADO (Para ACESSIBILIDADE - Enter/Espa√ßo) ---
              // Se o tazo estiver focado e o usu√°rio pressionar "Enter" ou "Espa√ßo"...
              onKeyDown={(evento) => {
                if (evento.key === "Enter" || evento.key === " ") {
                  evento.preventDefault(); // Previne o comportamento padr√£o da tecla (ex: rolar a p√°gina com Espa√ßo).
                  // Reutilizamos a mesma l√≥gica de intera√ß√£o do clique/toque!
                  lidarComInteracaoNoTazo(evento); // Passamos o evento, embora nosso handler atual n√£o o use diretamente.
                }
              }}
              tabIndex="0" // IMPORTANTE para acessibilidade: torna o `<div>` FOC√ÅVEL com a tecla Tab.
              // Elementos como `<div>` e `<span>` n√£o s√£o foc√°veis por padr√£o.
              role="button" // Diz aos leitores de tela que este `<div>` se comporta como um BOT√ÉO.
              // `aria-label` descreve a a√ß√£o do "bot√£o" para leitores de tela.
              // Inclui dinamicamente qual face est√° sendo mostrada.
              aria-label={`Tazo de ${nomeComumPrincipal}. Clique ou toque para virar e ampliar a imagem.`}
              // `aria-pressed` indica o estado de um bot√£o de altern√¢ncia (toggle button).
              // `true` se o tazo est√° "pressionado" (virado), `false` caso contr√°rio.
              aria-pressed={tazoCabecalhoVirado}
            >
              {/* Container Interno que efetivamente GIRA (o "disco" do tazo) */}
              <div
                className={`${styles.headerTazoInner} ${
                  // Classe base para o disco.
                  tazoCabecalhoVirado ? styles.headerTazoInnerFlipped : "" // Adiciona classe de "virado" SE `tazoCabecalhoVirado` for `true`.
                }`}
              >
                {/* Face FRONTAL do Tazo */}
                <div
                  className={`${styles.headerTazoFace} ${styles.headerTazoFront}`}
                >
                  {tazoFrontUrl ? ( // Se tiver URL para a imagem da frente...
                    <img
                      src={tazoFrontUrl}
                      alt=""
                      loading="lazy"
                      onError={(e) => (e.target.style.display = "none")}
                    />
                  ) : (
                    // `alt=""` - Imagem decorativa, o `aria-label` do container j√° descreve.
                    // `loading="lazy"` - O navegador s√≥ carrega a imagem quando ela est√° perto de aparecer na tela.
                    // `onError` - Se a imagem falhar ao carregar, ela √© escondida.
                    // Sen√£o (se n√£o tiver imagem da frente)...
                    // ...mas se TIVER imagem do VERSO, mostra um placeholder para a frente.
                    tazoBackUrl && (
                      <div className={styles.imagePlaceholder}>
                        Frente do Tazo Indispon√≠vel
                      </div>
                    )
                  )}
                </div>
                {/* Face do VERSO do Tazo */}
                <div
                  className={`${styles.headerTazoFace} ${styles.headerTazoBack}`}
                >
                  {tazoBackUrl ? ( // Se tiver URL para a imagem do verso...
                    <img
                      src={tazoBackUrl}
                      alt=""
                      loading="lazy"
                      onError={(e) => (e.target.style.display = "none")}
                    />
                  ) : (
                    // Sen√£o...
                    // ...mas se TIVER imagem da FRENTE, mostra um placeholder para o verso.
                    tazoFrontUrl && (
                      <div className={styles.imagePlaceholder}>
                        Verso do Tazo Indispon√≠vel
                      </div>
                    )
                  )}
                </div>
              </div>{" "}
              {/* Fim do .headerTazoInner */}
            </div> // Fim do .headerTazoContainer
          ) : imagensDaGaleria.length > 0 ? ( // SEN√ÉO (se n√£o tiver tazo), mas se houver imagens na galeria...
            // ...mostra a PRIMEIRA imagem da galeria como imagem principal de destaque.
            <img
              src={imagensDaGaleria[0]}
              alt={`Foto principal de ${nomeComumPrincipal}`}
              className={`${styles.detailImageLarge} ${styles.galleryImageClickable}`}
              onClick={() => abrirImagemNoLightbox(imagensDaGaleria[0])} // Clique abre no lightbox.
              onError={(e) => {
                e.target.style.display = "none";
              }} // Esconde se falhar.
              loading="lazy" // Carregamento pregui√ßoso.
              title="Clique para ampliar a imagem" // Dica ao passar o mouse.
            />
          ) : (
            // SEN√ÉO (se n√£o houver NENHUMA imagem - nem tazo, nem galeria)...
            // ...mostra um placeholder gen√©rico.
            <div
              className={styles.imagePlaceholder}
              style={{
                height: "200px",
                width: "100%",
                maxWidth: "300px",
                margin: "0 auto 1.5rem auto",
              }}
            >
              Nenhuma imagem principal dispon√≠vel para {nomeComumPrincipal}.
            </div>
          )}

          {/* Nome Comum e Cient√≠fico do Animal */}
          <h1 className={styles.animalNameTitle}>
            {nomeComumPrincipal}
            <span className={styles.scientificNameDetail}>
              (<em>{nomeCientificoPrincipal}</em>){" "}
              {/* `<em>` para √™nfase/it√°lico no nome cient√≠fico. */}
            </span>
          </h1>

          {/* Banner com o Status de Extin√ß√£o (cor de fundo din√¢mica) */}
          <div
            className={styles.extinctionBanner}
            style={{ backgroundColor: corDoStatusHex }}
          >
            <h2>
              {categoriaExtincao} - {descricaoExtincao}
            </h2>
          </div>

          {/* Escala Visual dos N√≠veis de Extin√ß√£o */}
          {/* S√≥ renderiza a escala se `escalaExtincao` for um array com itens. */}
          {escalaExtincao.length > 0 && (
            <div className={styles.extinctionScaleVisual}>
              {escalaExtincao.map(
                (
                  nivel // Mapeia cada n√≠vel da escala para um `div`.
                ) => (
                  <div
                    key={get(nivel, "sigla", Math.random())} // Chave √∫nica.
                    className={`${styles.scaleLevel} ${
                      // Classe base para o n√≠vel.
                      get(nivel, "sigla") === categoriaExtincao
                        ? styles.scaleLevelCurrent
                        : "" // Destaca o n√≠vel atual do animal.
                    }`}
                    style={{
                      backgroundColor: getExtinctionHexColor(
                        get(nivel, "sigla")
                      ),
                    }} // Cor de fundo para cada n√≠vel.
                    title={get(nivel, "descricao")} // Tooltip com a descri√ß√£o completa do n√≠vel ao passar o mouse.
                  >
                    {get(nivel, "sigla", "?")}{" "}
                    {/* Sigla do n√≠vel (ex: LC, EN), ou "?" se faltar. */}
                  </div>
                )
              )}
            </div>
          )}
        </header>{" "}
        {/* Fim do .detailHeader */}
        {/* --- SE√á√ïES DE CONTE√öDO DETALHADO --- */}
        {/* Cada se√ß√£o abaixo usa nosso componente auxiliar `DetailSectionContent`
            para manter um padr√£o visual e de fallback para dados ausentes.
            Passamos `title`, `icon` (emoji), `condition` (opcional), e o conte√∫do
            principal como `children` (o JSX entre as tags). */}
        <DetailSectionContent
          title="Outros Nomes Comuns"
          icon="üó£Ô∏è" // Emoji de "cabe√ßa falante"
          // `condition`: S√≥ mostra esta se√ß√£o se realmente houver nomes em outros idiomas para listar.
          condition={Object.keys(nomesComunsParaExibicao).length > 0}
        >
          {/* O conte√∫do (`children`) desta se√ß√£o √© o resultado da nossa fun√ß√£o
              `renderizarListaDeDefinicaoDetalhada`, que cria uma lista de termos/descri√ß√µes. */}
          {renderizarListaDeDefinicaoDetalhada(nomesComunsParaExibicao)}
        </DetailSectionContent>
        <DetailSectionContent
          title="Galeria de Fotos Adicionais"
          icon="üñºÔ∏è" // Emoji de "moldura com paisagem"
          // `condition`: S√≥ mostra se houver imagens na nossa `imagensDaGaleria`.
          condition={imagensDaGaleria.length > 0}
        >
          {/* O conte√∫do (`children`) aqui √© um par√°grafo de dica e o container da galeria. */}
          <p className={styles.galleryHint}>
            Clique nas imagens abaixo para ampliar e navegar na galeria.
          </p>
          <div className={styles.galleryContainer}>
            {/* Mapeamos nosso array `imagensDaGaleria` para criar uma tag `<img>` para cada URL. */}
            {imagensDaGaleria.map((urlDaImagem, indice) => (
              <img
                key={`${urlDaImagem}-${indice}`} // Chave √∫nica (URL + √≠ndice, caso haja URLs duplicadas nos dados originais).
                src={urlDaImagem}
                alt={`Foto ${indice + 1} de ${nomeComumPrincipal}`} // Texto alternativo descritivo para acessibilidade.
                className={`${styles.galleryImage} ${styles.galleryImageClickable}`} // Classes para estilo e interatividade.
                onClick={() => abrirImagemNoLightbox(urlDaImagem)} // A√ß√£o de clique para abrir no lightbox.
                onError={(e) => {
                  e.target.style.display = "none";
                }} // Se a imagem falhar ao carregar, ela √© escondida.
                loading="lazy" // "Carregamento pregui√ßoso": o navegador s√≥ baixa a imagem quando ela est√°
                // perto de aparecer na tela, o que pode melhorar o tempo de carregamento inicial.
                title="Clique para ampliar esta imagem" // Dica ao passar o mouse.
              />
            ))}
          </div>
        </DetailSectionContent>
        <DetailSectionContent
          title="Classifica√ß√£o Cient√≠fica (Taxonomia)"
          icon="üëë"
        >
          {/* Passamos o objeto `animal.classificacao_taxonomica` para nossa fun√ß√£o de renderiza√ß√£o. */}
          {renderizarListaDeDefinicaoDetalhada(
            get(animal, "classificacao_taxonomica", {})
          )}
        </DetailSectionContent>
        <DetailSectionContent
          title="Detalhes do Status de Conserva√ß√£o"
          icon="üìä"
        >
          {/* Aqui, o conte√∫do (`children`) √© um Fragmento React (`<>...</>`) com m√∫ltiplos par√°grafos,
              cada um renderizado condicionalmente se o dado espec√≠fico existir. */}
          <>
            {get(animal, "status_conservacao.categoria_global", "N/A") !==
              "N/A" && (
              <p>
                <strong>Categoria Global (IUCN):</strong>{" "}
                {get(animal, "status_conservacao.categoria_global")}
              </p>
            )}
            {get(animal, "status_conservacao.tendencia_populacional", "N/A") !==
              "N/A" && (
              <p style={{ marginTop: "0.3rem" }}>
                <strong>Tend√™ncia da Popula√ß√£o:</strong>{" "}
                {get(animal, "status_conservacao.tendencia_populacional")}
              </p>
            )}
            {get(animal, "status_conservacao.justificativa", "N/A") !==
              "N/A" && (
              <p
                className={styles.paragraphWithMargin}
                style={{ marginTop: "0.3rem" }}
              >
                <strong>Justificativa do Status:</strong>{" "}
                {get(animal, "status_conservacao.justificativa")}
              </p>
            )}
            {/* Se TODAS as informa√ß√µes desta se√ß√£o (categoria, tend√™ncia, justificativa)
                estiverem ausentes ou forem "N/A", o `DetailSectionContent` (devido √† l√≥gica
                de `conteudoConsideradoVazio` nele) mostrar√° a mensagem padr√£o
                "Informa√ß√£o n√£o dispon√≠vel...". */}
          </>
        </DetailSectionContent>
        {/* O Componente de Mapa, que recebe o objeto `animal` inteiro como prop
            para que ele possa extrair as coordenadas e exibir o mapa de distribui√ß√£o. */}
        <MapComponent animal={animal} />
        <DetailSectionContent title="Habitat e Ecossistemas" icon="üå≥">
          <>
            {get(animal, "habitat.descricao", "N/A") !== "N/A" && (
              <p className={styles.paragraphWithMargin}>
                {get(animal, "habitat.descricao")}
              </p>
            )}
            {/* Verifica se `animal.habitat.habitats_principais` √© um array E tem itens antes de tentar renderizar a lista. */}
            {Array.isArray(get(animal, "habitat.habitats_principais", [])) &&
              get(animal, "habitat.habitats_principais", []).length > 0 && (
                <>
                  <h3 className={styles.sectionSubtitle}>
                    Principais Tipos de Habitat:
                  </h3>
                  {renderizarListaDeItensSimples(
                    get(animal, "habitat.habitats_principais", []),
                    "üèûÔ∏è"
                  )}
                </>
              )}
          </>
        </DetailSectionContent>
        <DetailSectionContent title="Ecologia e Comportamento" icon="üî¨">
          {renderizarListaDeDefinicaoDetalhada(get(animal, "ecologia", {}))}
        </DetailSectionContent>
        <DetailSectionContent title="Principais Amea√ßas" icon="‚ö†Ô∏è">
          {renderizarListaDeItensSimples(get(animal, "ameacas", []), "‚ùó")}
        </DetailSectionContent>
        <DetailSectionContent title="A√ß√µes e Esfor√ßos de Conserva√ß√£o" icon="üõ°Ô∏è">
          <>
            {get(animal, "acoes_conservacao.protecao_legal", "N/A") !==
              "N/A" && (
              <p>
                <strong>Medidas de Prote√ß√£o Legal:</strong>{" "}
                {get(animal, "acoes_conservacao.protecao_legal")}
              </p>
            )}
            {Array.isArray(
              get(animal, "acoes_conservacao.acoes_recomendadas", [])
            ) &&
              get(animal, "acoes_conservacao.acoes_recomendadas", []).length >
                0 && (
                <>
                  <h3
                    className={styles.sectionSubtitle}
                    // Estilo inline condicional: adiciona margem superior ao subt√≠tulo
                    // APENAS SE a se√ß√£o "Prote√ß√£o Legal" acima dele tiver sido renderizada.
                    style={{
                      marginTop:
                        get(
                          animal,
                          "acoes_conservacao.protecao_legal",
                          "N/A"
                        ) !== "N/A"
                          ? "1rem"
                          : "0",
                    }}
                  >
                    A√ß√µes Recomendadas para Conserva√ß√£o:
                  </h3>
                  {renderizarListaDeItensSimples(
                    get(animal, "acoes_conservacao.acoes_recomendadas", []),
                    "‚úÖ"
                  )}
                </>
              )}
          </>
        </DetailSectionContent>
        <DetailSectionContent
          title="Curiosidades e Fatos Interessantes"
          icon="‚ú®"
        >
          {renderizarListaDeItensSimples(get(animal, "curiosidades", []), "üí°")}
        </DetailSectionContent>
        <DetailSectionContent title="Fonte das Informa√ß√µes" icon="üîó">
          <div className={styles.sourceSection}>
            {get(animal, "fonte.citacao", "N/A") !== "N/A" && (
              <p>
                <strong>Cita√ß√£o:</strong> {get(animal, "fonte.citacao")}
              </p>
            )}
            {/* Verifica se o link da fonte existe E n√£o √© apenas a string "N/A"
                (pois `get` pode retornar "N/A" se a propriedade `link` estiver ausente). */}
            {get(animal, "fonte.link") &&
              get(animal, "fonte.link") !== "N/A" && (
                <p>
                  <strong>Link da Fonte:</strong>{" "}
                  {/* Link para a fonte original, abrindo em nova aba. */}
                  <a
                    href={get(animal, "fonte.link")}
                    target="_blank"
                    rel="noopener noreferrer"
                  >
                    Visitar fonte original{" "}
                    <span aria-label="(abre em nova aba)">‚ÜóÔ∏è</span>{" "}
                    {/* √çcone e acessibilidade. */}
                  </a>
                </p>
              )}
          </div>
        </DetailSectionContent>
      </article>{" "}
      {/* Fim do .detailContainer (o <article>) */}
      {/* --- SE√á√ÉO DO LIGHTBOX (VISUALIZADOR DE IMAGEM AMPLIADA) --- */}
      {/* O lightbox (fundo escuro + imagem ampliada + controles) s√≥ √© renderizado
          SE `lightboxInfo.index` for diferente de -1 (ou seja, uma imagem foi selecionada)
          E se houver imagens na lista `lightboxInfo.images`. */}
      {lightboxInfo.index !== -1 && lightboxInfo.images.length > 0 && (
        // O "backdrop" √© o fundo escuro que cobre toda a tela.
        // Clicar DIRETAMENTE no backdrop (n√£o na imagem ou bot√µes) chama `fecharLightbox`.
        <div
          className={styles.lightboxBackdrop}
          onClick={fecharLightbox} // Fecha ao clicar no fundo.
          role="dialog" // Informa aos leitores de tela que isso √© um di√°logo/modal.
          aria-modal="true" // Indica que o conte√∫do POR TR√ÅS do lightbox est√° inativo.
          aria-label={`Visualizador de imagem: ${nomeComumPrincipal}`} // Um r√≥tulo geral para o di√°logo.
        >
          {/* Wrapper para o conte√∫do do lightbox (imagem e bot√µes de controle).
              Clicar DENTRO deste wrapper N√ÉO fecha o lightbox, gra√ßas a `e.stopPropagation()` abaixo. */}
          <div
            className={styles.lightboxContentWrapper}
            onClick={(e) => e.stopPropagation()} // IMPEDE que o clique aqui "borbulhe" para o backdrop.
          >
            {/* Bot√£o "Anterior" (s√≥ aparece se houver MAIS DE UMA imagem para navegar) */}
            {lightboxInfo.images.length > 1 && (
              <button
                onClick={imagemAnteriorLightbox}
                className={`${styles.lightboxNavButton} ${styles.lightboxPrevButton}`}
                aria-label="Ver imagem anterior na galeria"
                title="Anterior (Seta Esquerda)" // Dica visual.
              >
                &#10094;{" "}
                {/* C√≥digo HTML para o caractere de seta para esquerda (‚Äπ) */}
              </button>
            )}

            {/* Container da imagem ampliada */}
            <div className={styles.lightboxImageContainer}>
              <img
                src={lightboxInfo.images[lightboxInfo.index]} // A URL da imagem ATUAL a ser exibida.
                alt={`Imagem ampliada ${lightboxInfo.index + 1} de ${
                  lightboxInfo.images.length
                } do animal ${nomeComumPrincipal}`} // Texto alternativo bem descritivo.
                className={styles.lightboxImage} // Estilos para a imagem.
              />
            </div>

            {/* Bot√£o "Pr√≥xima" (s√≥ aparece se houver mais de uma imagem) */}
            {lightboxInfo.images.length > 1 && (
              <button
                onClick={proximaImagemLightbox}
                className={`${styles.lightboxNavButton} ${styles.lightboxNextButton}`}
                aria-label="Ver pr√≥xima imagem na galeria"
                title="Pr√≥xima (Seta Direita)"
              >
                &#10095;{" "}
                {/* C√≥digo HTML para o caractere de seta para direita (‚Ä∫) */}
              </button>
            )}

            {/* Bot√£o para Fechar o Lightbox (o "X") */}
            <button
              onClick={fecharLightbox}
              className={styles.lightboxCloseButton}
              aria-label="Fechar visualizador de imagem (Esc)" // Informa que Esc tamb√©m fecha.
              title="Fechar (Esc)" // Dica visual.
            >
              &times;{" "}
              {/* C√≥digo HTML para o s√≠mbolo de multiplica√ß√£o (X), que parece um "fechar". */}
            </button>
          </div>{" "}
          {/* Fim do .lightboxContentWrapper */}
        </div> // Fim do .lightboxBackdrop
      )}{" "}
      {/* Fim da renderiza√ß√£o condicional do Lightbox */}
    </> // Fim do Fragmento React
  ); // Fim da instru√ß√£o return do componente AnimalDetail
}; // Fim da defini√ß√£o do componente AnimalDetail

// Exporta o componente `AnimalDetail` para que ele possa ser importado e usado
// em outros arquivos da nossa aplica√ß√£o (principalmente no `App.js`).
export default AnimalDetail;
