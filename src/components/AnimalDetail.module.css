/* Caminho: src/components/AnimalDetail.module.css */

/* ===================================================================================
   ARQUIVO: AnimalDetail.module.css

   Ol√°, futuro(a) expert em CSS! üéâ
   Este arquivo √© como o "figurino" e o "cen√°rio" para a nossa p√°gina de Detalhes do Animal.
   Enquanto o `AnimalDetail.jsx` cuida da "estrutura" (o que mostrar), este arquivo
   CSS cuida da "apar√™ncia" (como mostrar).

   ‚ú® M√ÅGICA DO CSS MODULES ‚ú®
   Note a extens√£o ".module.css"! Isso √© super importante. Significa que estamos usando
   "CSS Modules". Pense nisso como dar um nome secreto e √∫nico para cada estilo que
   criamos aqui. Se voc√™ tem uma classe `.titulo` neste arquivo e outra classe `.titulo`
   em outro arquivo CSS de outro componente, elas N√ÉO V√ÉO BRIGAR! O React, junto com
   as ferramentas de "build" (como o Webpack), vai renomear `.titulo` para algo como
   `AnimalDetail_titulo__XyZ123`. No seu arquivo `.jsx`, voc√™ vai usar `styles.titulo`
   para pegar esse nome secreto. Resultado? Estilos bem organizados e sem conflitos!

   PRINCIPAIS CONCEITOS DE CSS QUE VOC√ä VAI VER AQUI:
    - Seletores de Classe: Como "miramos" nos elementos HTML para aplicar estilos (ex: `.detailContainer`).
    - Box Model: Entender `padding` (recheio), `margin` (espa√ßo de fora), `border` (borda).
    - `box-sizing: border-box;`: O segredo para layouts que n√£o te deixam maluco(a)!
    - Unidades de Medida:
        - `px` (pixels): Tamanho fixo, como um ponto na tela.
        - `rem` (root em): Relativo ao tamanho da fonte do elemento `<html>`. √ìtimo para
                         escalabilidade e acessibilidade. Se o usu√°rio aumenta a fonte
                         padr√£o do navegador, os `rem` se ajustam!
        - `em`: Relativo ao `font-size` do elemento PAI (ou do pr√≥prio elemento para `font-size`).
        - `%` (porcentagem): Relativo a alguma medida do elemento PAI.
    - Cores: `background-color`, `color`, `border-color`. Usaremos `rgba()` para cores com
             transpar√™ncia e `var()` para usar nossas vari√°veis CSS globais!
    - Vari√°veis CSS Globais (Custom Properties): Definidas em `src/index.css` (no `:root`),
      como `--color-primary`. Usamos `var(--nome-da-variavel)` para manter nosso design
      consistente e f√°cil de mudar.
    - Tipografia: `font-family`, `font-size`, `font-weight`, `font-style`, `line-height`,
                  `text-align`, `letter-spacing`, `text-transform`.
    - Sombras (`box-shadow`): Para dar aquele toque 3D e destacar elementos.
    - Bordas Arredondadas (`border-radius`): Para suavizar os cantos.
    - Layout com Flexbox (`display: flex`): Para alinhar e distribuir elementos de forma flex√≠vel.
        - `flex-direction`: Empilhar (`column`) ou alinhar em linha (`row`).
        - `justify-content`: Alinhar no eixo principal (horizontal se `row`, vertical se `column`).
        - `align-items: center`: Alinhar no eixo cruzado.
        - `gap`: Espacinho entre os itens do flex.
    - Layout com Grid (`display: grid`): Para layouts mais complexos em duas dimens√µes (linhas E colunas),
      perfeito para nossa galeria de imagens!
        - `grid-template-columns`: Define como as colunas s√£o criadas.
    - Responsividade de Imagens: Como fazer as imagens se adaptarem a diferentes tamanhos de tela
      sem quebrar o layout (`max-width: 100%`, `height: auto`, `object-fit`).
    - Efeitos 3D (para o Tazo): `perspective`, `transform-style: preserve-3d`, `transform: rotateY()`,
                               `backface-visibility`.
    - Pseudo-classes (`:hover`, `:focus-visible`, `:active`): Para dar feedback visual quando
      o usu√°rio interage com bot√µes e links.
    - Pseudo-elementos (`::after`): Para adicionar pequenos elementos decorativos ou informativos
                                   (como o √≠cone de lupa no hover da imagem da galeria).
    - Transi√ß√µes (`transition`): Para anima√ß√µes suaves quando as propriedades CSS mudam.
    - Media Queries (`@media`): A base do Design Responsivo. Fazemos a p√°gina ficar bonita
                                em celulares, tablets E desktops!
    - Coment√°rios Detalhados (como este!): Para que voc√™ (e outros devs) entendam
      cada pedacinho do c√≥digo.

   Vamos come√ßar a estilizar! üöÄ
   =================================================================================== */

/* --- CONTAINER PRINCIPAL DA P√ÅGINA DE DETALHES (.detailContainer) --- */
/* Esta classe √© aplicada ao elemento <article> no AnimalDetail.jsx.
   √â a "caixa" principal que envolve todo o conte√∫do de detalhes do animal. */
.detailContainer {
  /* Cor de fundo: `var(--color-card-bg)` pega o valor da vari√°vel CSS `--color-card-bg`
       que definimos no nosso arquivo global `src/index.css` (geralmente √© branco).
       Usar vari√°veis torna f√°cil mudar o "tema" do site depois! */
  background-color: var(--color-card-bg);

  /* Padding (Recheio): Espa√ßo INTERNO entre a borda do `.detailContainer` e seu conte√∫do.
       `1rem` significa 1 vez o tamanho da fonte do elemento raiz (<html>).
       Se a fonte raiz for 16px, 1rem = 16px.
       Este √© o padding base, pensando em telas pequenas (Mobile First). */
  padding: 1rem;

  /* Cantos Arredondados: `var(--border-radius)` tamb√©m vem do `index.css`.
       Deixa os cantos do container mais suaves e modernos. */
  border-radius: var(--border-radius);

  /* Sombra: Adiciona um efeito de "profundidade", como se o card estivesse flutuando.
       `0 4px 12px var(--color-shadow)`:
         - 0: Sem deslocamento horizontal.
         - 4px: Sombra deslocada 4 pixels para baixo.
         - 12px: Raio do "blur" (desfoque) da sombra.
         - var(--color-shadow): Cor da sombra (preto com transpar√™ncia, definida no `index.css`). */
  box-shadow: 0 4px 12px var(--color-shadow);

  /* Margem Superior: Espa√ßo ACIMA do `.detailContainer`, separando-o de qualquer
       coisa que venha antes (como o header da p√°gina). */
  margin-top: 1rem;

  /* DICA PARA ALUNOS: Se o componente PAI (App.js) n√£o estivesse controlando a largura
       m√°xima deste card, poder√≠amos fazer aqui:
       max-width: 960px;  // Para limitar a largura em telas grandes.
       margin-left: auto; // Usado com max-width para centralizar horizontalmente.
       margin-right: auto;
       Mas, como o App.js j√° tem um container que faz isso, n√£o precisamos repetir aqui. */
}

/* --- BOT√ÉO "VOLTAR √Ä LISTA" (.backButton) --- */
/* Estilos para o bot√£o que permite ao usu√°rio voltar para a lista de animais. */
.backButton {
  /* Cores: */
  background-color: var(
    --color-secondary
  ); /* Laranja (cor secund√°ria da nossa paleta). */
  color: white; /* Texto branco, para bom contraste. */

  border: none; /* Remove a borda padr√£o que os navegadores colocam em bot√µes. */

  /* Padding (Recheio do Bot√£o): Espa√ßo interno, entre o texto/√≠cone e a borda do bot√£o.
       Isso aumenta a √°rea clic√°vel e o tamanho visual do bot√£o.
       `0.7rem 1.3rem` = 0.7rem no topo/base, 1.3rem nas laterais. */
  padding: 0.7rem 1.3rem;

  border-radius: var(--border-radius); /* Cantos arredondados. */

  /* Tipografia do Bot√£o: */
  font-family: var(--font-primary); /* Fonte Nunito. */
  font-size: 0.9rem; /* Tamanho do texto. */
  font-weight: bold; /* Texto em negrito. */

  cursor: pointer; /* O cursor do mouse vira uma "m√£ozinha" quando passa por cima,
                        indicando que o elemento √© clic√°vel. */

  /* Transi√ß√µes Suaves: Quando as propriedades `background-color`, `transform` ou `box-shadow`
       mudarem (ex: no `:hover`), a mudan√ßa ser√° animada ao longo de 0.2s ou 0.15s. */
  transition: background-color 0.2s ease-out, transform 0.15s ease-out,
    box-shadow 0.2s ease-out;

  /* Margem Inferior: Um bom espa√ßo abaixo do bot√£o, antes do conte√∫do principal da p√°gina. */
  margin-bottom: 2rem;

  /* Layout Interno do Bot√£o (para alinhar o emoji com o texto): */
  display: inline-flex; /* Trata o bot√£o como um container flex para seus filhos (o emoji e o texto).
                             `inline-flex` faz com que o bot√£o se comporte como um elemento inline
                             em rela√ß√£o aos seus vizinhos, mas use flexbox para seus conte√∫dos internos. */
  align-items: center; /* Alinha verticalmente o emoji da seta e o texto "Voltar √† Lista". */
  gap: 0.5rem; /* Espa√ßo de 0.5rem ENTRE o emoji e o texto. */
}

/* Efeito de Hover e Foco Vis√≠vel no Bot√£o "Voltar":
     `:hover` = Quando o mouse est√° sobre o bot√£o.
     `:focus-visible` = Quando o bot√£o est√° focado via teclado (Tab). √â √≥timo para acessibilidade! */
.backButton:hover,
.backButton:focus-visible {
  background-color: var(
    --color-secondary-darker
  ); /* Laranja um pouco mais escuro. */
  transform: translateY(
    -2px
  ); /* Move o bot√£o 2 pixels PARA CIMA (efeito de "saltar"). */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); /* Sombra sutil para real√ßar o "salto". */
}

/* Estilo de Foco APENAS para navega√ß√£o por teclado (acessibilidade).
     `outline` √© um contorno que n√£o afeta o layout (diferente de `border`). */
.backButton:focus-visible {
  outline: 3px solid var(--color-primary-darker); /* Contorno verde escuro bem vis√≠vel. */
  outline-offset: 2px; /* Pequeno espa√ßo entre o bot√£o e o contorno. */
}

/* --- CABE√áALHO DA P√ÅGINA DE DETALHES (.detailHeader) --- */
/* Este `<header>` √© INTERNO √† p√°gina AnimalDetail, n√£o o header principal da aplica√ß√£o.
     Ele cont√©m o tazo (ou imagem principal), nome do animal, e status de extin√ß√£o. */
.detailHeader {
  text-align: center; /* Centraliza todo o conte√∫do de texto DENTRO deste header. */
  margin-bottom: 2.5rem; /* Espa√ßo generoso ABAIXO deste header, antes das se√ß√µes de detalhes. */
  padding-bottom: 2rem; /* Espa√ßo INTERNO na parte de baixo deste header. */
  /* A BORDA INFERIOR deste header √© especial!
       Ela √© estilizada DINAMICAMENTE no arquivo `.jsx` (usando `style={{...}}`).
       A COR da borda muda de acordo com o n√≠vel de extin√ß√£o do animal.
       Exemplo de como seria no JSX:
       `borderBottomColor: corDoStatusHex,`
       `borderBottomWidth: "5px",`
       `borderBottomStyle: "solid",`
       Ent√£o, n√£o precisamos definir a cor da borda aqui no CSS. */
}

/* --- ESTILOS PARA O TAZO QUE VIRA NO CABE√áALHO --- */
/* `.headerTazoContainer`: O "palco" 3D para o nosso tazo.
     Ele n√£o gira, mas define a perspectiva para o filho (`.headerTazoInner`) que gira. */
.headerTazoContainer {
  width: 100%; /* Ocupa a largura dispon√≠vel, MAS... */
  max-width: 220px; /* ...NUNCA ser√° mais largo que 220px. Este √© o tamanho do nosso tazo. */
  height: 220px; /* Altura igual √† largura para um tazo quadrado/circular. */

  margin-left: auto; /* Centraliza o tazo horizontalmente no `.detailHeader`. */
  margin-right: auto;
  margin-bottom: 1.8rem; /* Espa√ßo abaixo do tazo, antes do nome do animal. */

  /* M√ÅGICA 3D - Perspectiva:
       `perspective` define a "profundidade" da cena 3D. Pense nisso como a dist√¢ncia
       do seu olho at√© o objeto. Um valor menor faz o efeito 3D ser mais exagerado.
       900px √© um valor comum para um efeito sutil. */
  perspective: 900px;

  cursor: pointer; /* Indica que o tazo √© clic√°vel (para abrir a imagem no lightbox). */
  display: block; /* Necess√°rio para que `margin: auto` funcione corretamente para centralizar. */

  /* FAZENDO O TAZO SER CIRCULAR:
       Se o `width` e `height` s√£o iguais, `border-radius: 50%` cria um c√≠rculo perfeito.
       Se o tazo fosse quadrado com cantos arredondados, usar√≠amos algo como
       `border-radius: var(--border-radius);` */
  border-radius: 50%;

  outline: none; /* Remove o contorno padr√£o do navegador quando o tazo √© focado.
                      Vamos customizar o feedback de foco. */
  /* Remove o destaque azul/cinza que aparece em alguns navegadores m√≥veis ao tocar. */
  -webkit-tap-highlight-color: transparent;

  /* Borda inicial transparente, para o efeito de foco que faremos. */
  border: 3px solid transparent;
  /* Transi√ß√µes suaves para a cor da borda (no foco) e transforma√ß√£o (no hover). */
  transition: border-color 0.2s ease-out, transform 0.2s ease-out;
}

/* Efeito de Hover sutil no container do tazo. */
.headerTazoContainer:hover {
  /* Poder√≠amos mudar a borda aqui, ex:
       border-color: var(--color-secondary-light, #fde6d4); (Um laranja bem claro) */
  transform: scale(
    1.02
  ); /* Leve aumento de tamanho, parece que "salta" um pouco. */
}

/* Estilo de Foco Vis√≠vel para o tazo (quando o usu√°rio navega com Tab). */
.headerTazoContainer:focus-visible {
  border-color: var(--color-secondary); /* Borda laranja para indicar foco. */
  /* Adicionamos um "anel" externo para maior destaque do foco, usando m√∫ltiplas sombras. */
  box-shadow: 0 0 0 3px var(--color-bg-light),
    /* Anel interno da cor de fundo da p√°gina (cria um espa√ßo). */ 0 0 0 5px
      var(--color-secondary); /* Anel externo laranja. */
}

/* `.headerTazoInner`: O elemento INTERNO que realmente executa a rota√ß√£o 3D.
     Este √© o "disco" do tazo. */
.headerTazoInner {
  position: relative; /* Necess√°rio para que as faces (frente e verso) se posicionem
                           corretamente dentro dele usando `position: absolute`. */
  width: 100%; /* Ocupa todo o espa√ßo do `.headerTazoContainer`. */
  height: 100%;
  /* Transi√ß√£o para a propriedade `transform` (que faz o giro).
       `0.7s`: Dura√ß√£o da anima√ß√£o de giro.
       `cubic-bezier(...)`: Uma fun√ß√£o de temporiza√ß√£o customizada para a anima√ß√£o.
                            Cria um efeito de giro mais interessante do que um simples `ease`.
                            Voc√™ pode usar ferramentas online para gerar essas curvas! */
  transition: transform 0.7s cubic-bezier(0.45, 0.05, 0.55, 0.95);

  /* M√ÅGICA 3D - Preservar 3D:
       ESSENCIAL! Diz ao navegador que os FILHOS deste elemento (.headerTazoFace)
       tamb√©m devem ser tratados em um espa√ßo 3D e n√£o "achatados" em 2D. */
  transform-style: preserve-3d;

  border-radius: inherit; /* Herda o `border-radius` do pai (`.headerTazoContainer`),
                               ent√£o se o pai √© um c√≠rculo, o filho tamb√©m ser√°. */
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); /* Sombra sutil no pr√≥prio "disco" do tazo. */
}

/* `.headerTazoInnerFlipped`: Classe aplicada ao `.headerTazoInner` pelo JavaScript
     quando o tazo deve estar "virado" (mostrando o verso). */
.headerTazoInnerFlipped {
  /* Gira o elemento 180 graus em torno do eixo Y (vertical). */
  transform: rotateY(180deg);
}

/* `.headerTazoFace`: Estilo COMUM para a FRENTE e o VERSO do tazo. */
.headerTazoFace {
  position: absolute; /* FAZ AS DUAS FACES SE SOBREPorem no mesmo lugar, dentro do `.headerTazoInner`. */
  width: 100%;
  height: 100%;

  /* M√ÅGICA 3D - Visibilidade da Face de Tr√°s:
       CRUCIAL! Quando um elemento 3D gira, por padr√£o voc√™ veria a "parte de tr√°s" da face
       que est√° virada para longe de voc√™ (geralmente espelhada).
       `backface-visibility: hidden;` ESCONDE essa face de tr√°s.
       Isso √© o que faz o efeito de "virar a carta" funcionar. */
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden; /* Prefixo para compatibilidade com navegadores WebKit (Safari). */

  /* Usamos Flexbox para centralizar a imagem DENTRO de cada face do tazo. */
  display: flex;
  justify-content: center; /* Centraliza horizontalmente. */
  align-items: center; /* Centraliza verticalmente. */

  border-radius: inherit; /* Herda o `border-radius` (para manter o formato circular/arredondado). */
  overflow: hidden; /* Garante que, se a imagem for maior que a face,
                         o excesso seja CORTADO e n√£o "vaze" para fora das bordas arredondadas. */
  background-color: var(
    --color-bg-light,
    #f0f2f5
  ); /* Cor de fundo de fallback, caso a imagem n√£o carregue. */
}

/* Estilos para a imagem <img> DENTRO de cada face do tazo. */
.headerTazoFace img {
  width: 100%; /* A imagem tenta ocupar toda a largura da face. */
  height: 100%; /* E toda a altura da face. */
  /* `object-fit` controla como a imagem se encaixa quando suas propor√ß√µes
       n√£o s√£o as mesmas que as da face (que √© quadrada/circular).
       - `cover`: A imagem mant√©m sua propor√ß√£o, mas √© redimensionada para PREENCHER
                  completamente a √°rea da face. Se necess√°rio, a imagem ser√° CORTADA.
                  Para tazos, `cover` costuma ser a melhor escolha.
       - `contain`: A imagem mant√©m sua propor√ß√£o e √© redimensionada para CABER
                    INTEIRAMENTE dentro da √°rea da face. Pode deixar espa√ßos vazios.
       - `fill`: Estica a imagem para preencher, ignorando a propor√ß√£o (geralmente fica feio!). */
  object-fit: cover;
}

/* `.headerTazoFront`: A face da FRENTE.
     Ela j√° est√° na posi√ß√£o correta (virada para o usu√°rio) por padr√£o. */
.headerTazoFront {
  /* Nenhum estilo de transforma√ß√£o espec√≠fico √© necess√°rio aqui. */
}

/* `.headerTazoBack`: A face do VERSO.
     Ela precisa come√ßar "pr√©-rotacionada" de costas para o usu√°rio. */
.headerTazoBack {
  transform: rotateY(
    180deg
  ); /* Gira 180 graus em torno do eixo Y.
                                   Como o `.headerTazoInner` tamb√©m gira 180 graus quando
                                   a classe `.headerTazoInnerFlipped` √© aplicada,
                                   esta face do verso acaba ficando virada para frente. */
}

/* `.imagePlaceholder`: Usado quando uma imagem (tazo, galeria ou principal)
     n√£o pode ser carregada ou n√£o est√° dispon√≠vel. Mostra uma mensagem amig√°vel. */
.imagePlaceholder {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%; /* Ocupa o espa√ßo da imagem que faltou. */
  color: var(--color-text-muted); /* Texto cinza. */
  font-size: 0.9rem;
  background-color: #e9ecef; /* Fundo cinza bem claro. */
  border-radius: inherit; /* Herda o arredondamento do container da imagem. */
  padding: 15px; /* Espa√ßo interno para o texto. */
  box-sizing: border-box; /* Padding n√£o aumenta o tamanho total. */
  text-align: center;
  border: 1px dashed var(--color-border-light); /* Borda tracejada sutil. */
}

/* `.detailImageLarge`: Estilo para uma imagem principal grande.
     Usada como fallback se as imagens do tazo n√£o estiverem dispon√≠veis,
     mas houver uma imagem na galeria para destacar no topo da p√°gina. */
.detailImageLarge {
  display: block; /* Para `margin: auto` funcionar e remover espa√ßos extras. */

  /* --- RESPONSIVIDADE DA IMAGEM DE DESTAQUE --- */
  /* ALUNOS: Esta √© a combina√ß√£o chave para imagens responsivas! */
  width: 100%; /* A imagem TENTA ocupar 100% da largura de seu container pai. */
  max-width: 320px; /* MAS, ela NUNCA ser√° mais larga que 320 pixels.
                         Este √© o tamanho m√°ximo que queremos para ela em telas maiores.
                         Em telas MENORES que 320px, o `width: 100%` far√° com que ela
                         encolha para caber na largura dispon√≠vel. */
  height: auto; /* A M√ÅGICA! A altura da imagem se ajustar√° AUTOMATICAMENTE para
                       MANTER A PROPOR√á√ÉO original da imagem. Isso evita que ela
                       fique achatada ou esticada. */

  /* `object-fit: cover;` Se a imagem precisar ser cortada para caber nas dimens√µes
       (mais relevante se voc√™ definir uma altura ou `aspect-ratio` fixos).
       Com `height: auto`, `object-fit` tem menos efeito visual direto, mas √© bom ter. */
  object-fit: cover;
  border-radius: var(--border-radius); /* Cantos arredondados. */
  margin-left: auto; /* Centraliza a imagem horizontalmente se ela for menor que */
  margin-right: auto; /* a largura do seu container pai. */
  margin-bottom: 1.5rem; /* Espa√ßo abaixo da imagem. */
  box-shadow: 0 5px 15px var(--color-shadow); /* Sombra para destaque. */
  background-color: #f0f0f0; /* Cor de fundo enquanto a imagem carrega. */
}

/* --- T√çTULOS E STATUS DE EXTIN√á√ÉO (dentro do .detailHeader) --- */
.animalNameTitle {
  font-family: var(--font-primary);
  font-size: 2.2rem; /* Tamanho para telas pequenas/m√©dias. Ser√° ajustado em media queries. */
  font-weight: 800; /* Nunito Extra-Bold. */
  margin: 0.75rem 0 0.2rem 0; /* Margens: topo | laterais (0) | base. */
  color: var(--color-primary); /* Verde prim√°rio. */
  line-height: 1.15; /* Altura da linha um pouco mais justa para t√≠tulos grandes. */
}
.scientificNameDetail {
  font-family: var(--font-secondary);
  font-size: 1.3rem; /* Tamanho para telas pequenas/m√©dias. */
  font-weight: 400; /* Open Sans Regular. */
  font-style: italic; /* Nome cient√≠fico sempre em it√°lico. */
  color: #455a64; /* Um tom de cinza-azulado, mais escuro e s√≥brio. */
  margin-top: 0.25rem; /* Pequeno espa√ßo acima. */
  display: block; /* Para ocupar a largura total e permitir `text-align: center` do pai. */
  width: 100%;
  line-height: 1.3;
}
/* Garante que a tag <em> dentro do span tamb√©m fique em it√°lico,
     embora o `font-style: italic` no pai j√° deva cuidar disso. */
.scientificNameDetail em {
  font-style: italic;
}

/* Banner/etiqueta para o status de extin√ß√£o. */
.extinctionBanner {
  padding: 0.7rem 1.2rem; /* Mais espa√ßamento interno. */
  border-radius: var(
    --border-radius-small
  ); /* Cantos menos arredondados que o card principal. */
  color: var(
    --color-text-light
  ); /* Cor do texto (preto/cinza escuro). A cor de fundo √© din√¢mica. */
  margin-top: 1.25rem; /* Mais espa√ßo acima do banner. */
  display: inline-block; /* Para que o banner se ajuste ao tamanho do seu conte√∫do de texto. */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08); /* Sombra sutil. */
  font-weight: 600; /* Texto do banner em semi-bold. */
}
.extinctionBanner h2 {
  /* O texto dentro do banner. */
  margin: 0; /* Remove margens padr√£o do h2. */
  font-size: 1.1rem; /* Ajuste o tamanho conforme o design. */
  line-height: 1.4;
}

/* Escala visual dos n√≠veis de extin√ß√£o. */
.extinctionScaleVisual {
  display: flex; /* Flexbox para alinhar os indicadores da escala. */
  justify-content: center; /* Centraliza os indicadores horizontalmente. */
  align-items: center; /* Alinha verticalmente (√∫til se tiverem alturas diferentes). */
  gap: 8px; /* Espa√ßo um pouco maior ENTRE cada indicador da escala. */
  margin-top: 1.25rem; /* Espa√ßo acima da escala. */
  flex-wrap: wrap; /* Se n√£o couberem todos os indicadores na largura da tela,
                              eles "quebram" para a pr√≥xima linha. Essencial para mobile! */
}
/* Cada indicador de n√≠vel na escala (ex: "LC", "EN"). */
.scaleLevel {
  padding: 0.4rem 0.8rem; /* Espa√ßamento interno do indicador. */
  font-size: 0.75rem; /* Tamanho da fonte da sigla (LC, EN). */
  border-radius: var(--border-radius-small); /* Cantos arredondados. */
  color: var(--color-text-light); /* Cor do texto da sigla. */
  font-weight: bold; /* Sigla em negrito. */
  min-width: 40px; /* Largura m√≠nima para garantir espa√ßo para siglas de 2 letras. */
  text-align: center; /* Centraliza a sigla dentro do indicador. */
  border: 1px solid rgba(0, 0, 0, 0.2); /* Borda sutil um pouco mais escura. */
  /* Transi√ß√µes para os efeitos de hover e para o destaque do n√≠vel atual. */
  transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
}
/* Estilo para o indicador que representa o N√çVEL ATUAL do animal na escala. */
.scaleLevelCurrent {
  border-width: 2.5px; /* Borda bem mais grossa para destaque. */
  border-color: var(
    --color-text-light
  ); /* Cor da borda igual √† do texto para unidade visual. */
  transform: scale(1.2); /* Aumenta BASTANTE o tamanho do indicador atual. */
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.25); /* Sombra mais pronunciada. */
  z-index: 2; /* Garante que este indicador fique NA FRENTE dos outros se houver sobreposi√ß√£o
                   (ex: durante a anima√ß√£o de `transform: scale`). */
}
/* Efeito de Hover para os OUTROS n√≠veis da escala (que N√ÉO s√£o o n√≠vel atual). */
.scaleLevel:not(.scaleLevelCurrent):hover {
  /* `:not()` seleciona elementos que N√ÉO t√™m a classe `.scaleLevelCurrent`. */
  transform: scale(1.1); /* Aumenta um pouco o tamanho no hover. */
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.15); /* Sombra sutil. */
  z-index: 1; /* Fica na frente dos n√£o-hovered, mas ATR√ÅS do indicador atual. */
}

/* --- ESTILOS GERAIS PARA SE√á√ïES DE INFORMA√á√ÉO (.detailSection) --- */
/* Cada bloco de informa√ß√£o (Habitat, Ecologia, etc.) usa esta classe. */
.detailSection {
  margin-bottom: 2.5rem; /* Espa√ßo generoso ABAIXO de cada se√ß√£o. */
  padding-bottom: 2rem; /* Espa√ßo INTERNO na base da se√ß√£o, antes da borda. */
  /* Linha divis√≥ria na base de cada se√ß√£o. */
  border-bottom: 1px solid var(--color-border-light); /* Cinza claro. */
}
/* Remove a borda e margens inferiores da √öLTIMA se√ß√£o, para n√£o ter espa√ßo extra no final.
     `:last-child` √© uma pseudo-classe que seleciona o √∫ltimo elemento entre seus irm√£os. */
.detailSection:last-child {
  border-bottom: none;
  margin-bottom: 0;
  padding-bottom: 0;
}

/* T√≠tulo de cada se√ß√£o (H2 dentro de .detailSection). */
.sectionTitle {
  font-family: var(--font-primary);
  font-size: 1.5rem; /* Tamanho inicial para telas pequenas/m√©dias. */
  color: var(--color-primary); /* Verde. */
  margin-top: 0; /* Remove margem superior padr√£o do h2 (j√° temos margin no .detailSection). */
  margin-bottom: 1.25rem; /* Mais espa√ßo abaixo do t√≠tulo, antes do conte√∫do da se√ß√£o. */
  border-bottom: 3px solid var(--color-secondary); /* Linha laranja grossa abaixo do t√≠tulo. */
  padding-bottom: 0.6rem; /* Espa√ßo entre o texto do t√≠tulo e a linha laranja. */
  display: inline-block; /* Faz com que a borda inferior se ajuste √† LARGURA DO TEXTO do t√≠tulo,
                              em vez de ocupar a largura total do container. */
}
/* Estilo para o emoji (√≠cone) no t√≠tulo da se√ß√£o. */
.sectionTitle .icon {
  margin-right: 0.75rem; /* Mais espa√ßo entre o emoji e o texto do t√≠tulo. */
  font-size: 1em; /* O emoji herda o tamanho da fonte do `.sectionTitle`. */
  /* Ajuste fino no alinhamento vertical do emoji para que fique bem com o texto.
       Pode precisar de pequenos ajustes dependendo da fonte e do emoji. */
  vertical-align: -0.1em;
}

/* Subt√≠tulos (H3) dentro de uma se√ß√£o (ex: "Principais Tipos de Habitat"). */
.sectionSubtitle {
  font-family: var(--font-primary);
  font-size: 1.15rem;
  color: var(
    --color-text-light
  ); /* Cor do texto principal, n√£o o verde dos t√≠tulos de se√ß√£o. */
  margin-top: 1.5rem; /* Mais espa√ßo acima se vier depois de outro conte√∫do na mesma se√ß√£o. */
  margin-bottom: 0.8rem; /* Mais espa√ßo abaixo, antes da lista ou par√°grafo que ele introduz. */
  font-weight: 700; /* Negrito (Bold). */
}

/* --- ESTILOS PARA LISTAS (<ul>, <dl>) E ITENS DE LISTA (<li>, <div> dentro de listas) --- */
/* Usamos esta classe `.list` tanto para listas <ul> (com `renderizarListaDeItensSimples`)
     quanto para as "listas de defini√ß√£o" <dl> (com `renderizarListaDeDefinicaoDetalhada`). */
.list {
  list-style: none; /* Remove os marcadores padr√£o de listas (bolinhas, n√∫meros). */
  padding-left: 0; /* Remove o recuo padr√£o √† esquerda das listas. */
  margin-top: 0.75rem; /* Espa√ßo acima da lista. */

  /* Usamos Flexbox para controlar o layout dos itens da lista. */
  display: flex;
  flex-direction: column; /* Empilha os itens da lista verticalmente. */
  gap: 0.8rem; /* Espa√ßo maior ENTRE cada item da lista. */
}

/* Cada item da lista (seja um <li> ou um <div> para par chave-valor). */
.listItem {
  background-color: #fdfdfd; /* Fundo quase branco, muito sutil, para destacar levemente o item. */
  padding: 0.8rem 1.2rem; /* Mais padding interno nos itens. */
  border-radius: var(
    --border-radius-small
  ); /* Cantos levemente arredondados. */
  /* Borda decorativa √† esquerda.
       `var(--color-secondary-light, #FFDAB9)` tenta usar uma vari√°vel global para um laranja claro.
       Se n√£o existir, usa `#FFDAB9` (cor P√™ssego Claro) como fallback.
       ALUNOS: Definam `--color-secondary-light` no seu `:root` em `index.css`! */
  border-left: 5px solid var(--color-secondary-light, #ffdab9);
  line-height: 1.6; /* Boa altura de linha para legibilidade do texto dentro do item. */
  font-size: 0.95rem; /* Tamanho da fonte para o conte√∫do dos itens. */
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05); /* Sombra muito sutil no item. */
}
/* Para texto em NEGRITO (tag <strong>) DENTRO de um item da lista. */
.listItem strong {
  color: var(--color-primary-darker); /* Verde mais escuro para dar √™nfase. */
  font-weight: 700; /* Garante que seja bold. */
}
/* Para o emoji (√≠cone) DENTRO de um item da lista. */
.listItem .icon {
  margin-right: 0.5rem; /* Espa√ßo entre o √≠cone e o texto. */
  color: var(
    --color-secondary
  ); /* √çcones podem ter a cor secund√°ria (laranja). */
}

/* Estilos para Listas de Defini√ß√£o (<dt> - termo, <dd> - descri√ß√£o) */
/* O "termo" (ex: "Reino:", "Filo:"). */
.definitionListDt {
  font-weight: 700; /* Negrito. */
  color: var(--color-primary); /* Cor verde prim√°ria. */
  margin-bottom: 0.25rem; /* Espa√ßo abaixo do termo, antes da descri√ß√£o. */
  font-size: 0.9em; /* Um pouco menor que o texto da descri√ß√£o (que √© 1em do .listItem). */
  text-transform: uppercase; /* Deixa o termo em MAI√öSCULAS para destaque. */
  letter-spacing: 0.5px; /* Leve espa√ßamento entre as letras. */
}
/* A "descri√ß√£o" (ex: "Animalia", "Chordata"). */
.definitionListDd {
  margin-left: 0; /* Remove o recuo padr√£o que os navegadores d√£o para <dd>. */
  color: var(--color-text-light); /* Cor do texto principal. */
  font-size: 1em; /* Tamanho relativo ao `font-size` do `.listItem` pai. */
}

/* Par√°grafos dentro das se√ß√µes que podem precisar de uma margem inferior maior
     para separar blocos de texto. */
.paragraphWithMargin {
  margin-bottom: 1.2rem; /* Mais espa√ßo abaixo de par√°grafos descritivos. */
  line-height: 1.65; /* Altura de linha generosa para facilitar a leitura de blocos de texto. */
  color: var(--color-text-light); /* Cor do texto padr√£o. */
}

/* --- GALERIA DE FOTOS ADICIONAIS --- */
/* Texto de dica "Clique nas imagens..." acima da galeria. */
.galleryHint {
  font-size: 0.9rem;
  color: var(--color-text-muted); /* Cinza suave. */
  text-align: center; /* Centraliza a dica. */
  margin-bottom: 1.5rem; /* Mais espa√ßo abaixo da dica, antes da galeria. */
  font-style: italic; /* Texto em it√°lico. */
}

/* Container da galeria de imagens. */
.galleryContainer {
  display: grid; /* Usamos CSS Grid para o layout da galeria! √â super poderoso. */

  /* `grid-template-columns` define como as colunas s√£o criadas.
       - `repeat(auto-fit, ...)`: Diz ao grid para criar QUANTAS COLUNAS COUBEREM na largura
                                  dispon√≠vel, com base no tamanho definido em `minmax`.
       - `minmax(260px, 1fr)`: Cada coluna ter√° no M√çNIMO 260px de largura.
                                Se houver mais espa√ßo na tela, as colunas se expandir√£o
                                igualmente para preencher esse espa√ßo (`1fr` significa "uma fra√ß√£o
                                do espa√ßo restante").
       RESULTADO: Em telas largas, voc√™ pode ter 3-4 colunas. Em telas menores,
                  pode ter 2, e em telas muito pequenas (mobile), pode ter apenas 1 coluna.
                  Tudo automaticamente! */
  grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));

  gap: 1.25rem; /* Espa√ßo (horizontal E vertical) ENTRE as imagens da galeria. */
  justify-items: center; /* Se as c√©lulas do grid forem mais largas que as imagens (o que
                              n√£o deve acontecer com `width: 100%` na imagem), isso centralizaria
                              as imagens dentro de suas c√©lulas. */
}

/* Estilo para cada imagem <img> individual na galeria. */
.galleryImage {
  /* --- RESPONSIVIDADE DAS IMAGENS DA GALERIA --- */
  /* ALUNOS: Esta combina√ß√£o √© a chave para imagens que se adaptam bem! */
  display: block; /* Ajuda a evitar espa√ßos extras abaixo da imagem (que √© inline por padr√£o)
                       e permite que `margin: auto` funcione para centraliza√ß√£o se a imagem
                       fosse menor que seu container (n√£o √© o caso aqui com width: 100%). */
  width: 100%; /* A imagem ocupar√° 100% da LARGURA da c√©lula do grid em que est√°.
                       Como a c√©lula do grid j√° √© responsiva (gra√ßas ao `minmax`),
                       a imagem tamb√©m se tornar√° responsiva. */
  max-width: 100%; /* GARANTE que a imagem n√£o "vaze" ou ultrapasse a largura de seu
                       container (a c√©lula do grid). Mesmo que a imagem original seja
                       enorme, ela ser√° limitada pela largura da c√©lula.
                       Este √© o ponto MAIS IMPORTANTE para evitar overflow em telas pequenas. */
  height: auto; /* A M√ÅGICA ACONTECE AQUI! A altura da imagem se ajustar√°
                       AUTOMATICAMENTE para MANTER A PROPOR√á√ÉO original da imagem,
                       baseado na sua largura (que est√° sendo controlada pelo `width: 100%`
                       e pelo tamanho da c√©lula do grid). Isso evita que a imagem
                       fique achatada ou esticada. */

  /* `aspect-ratio: 4 / 3;` (Comentado para explica√ß√£o - veja a media query para telas muito pequenas
                               onde usamos `aspect-ratio: unset;` para a corre√ß√£o espec√≠fica) */

  object-fit: cover; /* Como a altura √© `auto` e n√£o temos um `aspect-ratio` fixo (neste estado base),
                          `object-fit: cover` aqui ter√° o efeito de garantir que, se por algum
                          motivo a imagem fosse renderizada em um espa√ßo que n√£o batesse com sua
                          propor√ß√£o (o que n√£o deve acontecer com `height: auto`), ela preencheria
                          esse espa√ßo cortando o m√≠nimo necess√°rio. √â uma boa "defesa". */

  border-radius: var(--border-radius); /* Cantos arredondados. */
  box-shadow: 0 4px 10px var(--color-shadow); /* Sombra mais pronunciada para as imagens. */
  /* Transi√ß√µes suaves para os efeitos de hover. */
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.25, 1),
    box-shadow 0.25s cubic-bezier(0.25, 0.1, 0.25, 1);
  background-color: #e0e0e0; /* Cor de fundo cinza mais escura enquanto a imagem carrega. */
  box-sizing: border-box; /* Garante que padding/border (se adicionados) n√£o quebrem o layout. */
}

/* Adiciona um cursor especial para indicar que a imagem da galeria √© clic√°vel (para ampliar). */
.galleryImageClickable {
  cursor: zoom-in; /* Cursor de lupa de aumento. */
  position: relative; /* Necess√°rio para o posicionamento absoluto do pseudo-elemento `::after` (o √≠cone de lupa no hover). */
}

/* Efeito de Hover para as imagens da galeria. */
.galleryImageClickable:hover {
  transform: scale(1.05) translateY(-3px); /* Aumenta um pouco a imagem e a "levanta" 3 pixels. */
  box-shadow: 0 8px 18px rgba(0, 0, 0, 0.22); /* Sombra mais forte e espalhada no hover. */
}

/* √çcone de Lupa que aparece NO HOVER da imagem da galeria.
     Usamos um "pseudo-elemento" `::after`. Pense nele como um pequeno "fantasma"
     que podemos estilizar e que √© "anexado" DEPOIS do conte√∫do do elemento `.galleryImageClickable`. */
.galleryImageClickable:hover::after {
  content: "üîç"; /* O conte√∫do do nosso pseudo-elemento: o emoji de lupa. */
  position: absolute; /* Posicionado em rela√ß√£o ao `.galleryImageClickable` (que tem `position: relative`). */
  top: 50%;
  left: 50%; /* Coloca o canto superior esquerdo do pseudo-elemento no centro da imagem. */
  /* Truque para centralizar PERFEITAMENTE um elemento de tamanho desconhecido: */
  transform: translate(-50%, -50%) scale(1.7); /* Move -50% de sua pr√≥pria largura/altura para a esquerda/cima,
                                                    E aumenta um pouco o tamanho da lupa. */
  color: white; /* Cor do emoji da lupa. */
  background-color: rgba(
    0,
    0,
    0,
    0.7
  ); /* Fundo semi-transparente escuro para a lupa se destacar. */
  padding: 0.8rem; /* Espa√ßamento interno para a lupa ficar maior. */
  border-radius: 50%; /* Deixa o fundo da lupa circular. */
  font-size: 1.8rem; /* Tamanho do emoji da lupa. */
  pointer-events: none; /* IMPORTANTE: Faz com que o pseudo-elemento N√ÉO interaja com o mouse.
                             Isso garante que o clique ainda v√° para a imagem <img> por baixo
                             (para abrir o lightbox), e n√£o seja "bloqueado" pela lupa. */
  opacity: 1; /* Garante que seja vis√≠vel (poderia ter uma transi√ß√£o de opacidade aqui). */
}

/* --- SE√á√ÉO DE FONTE DA INFORMA√á√ÉO (.sourceSection) --- */
.sourceSection {
  margin-top: 0.5rem; /* Espa√ßo acima da se√ß√£o de fonte. */
}
.sourceSection p {
  margin-bottom: 0.5rem; /* Espa√ßo entre par√°grafos (se houver mais de um) na se√ß√£o de fonte. */
  font-size: 0.85rem; /* Tamanho da fonte para informa√ß√µes de cita√ß√£o/link. */
  color: #424242; /* Cinza bem escuro, para ser um pouco menos proeminente que o texto principal. */
  line-height: 1.5;
}
.sourceSection strong {
  /* Para os r√≥tulos "Cita√ß√£o:", "Link da Fonte:". */
  font-weight: 600; /* Semi-bold. */
  color: var(--color-primary-darker); /* Verde escuro. */
}
.sourceSection a {
  /* Para o link da fonte. */
  color: var(
    --color-secondary-darker
  ); /* Laranja escuro para o link, para destaque. */
  text-decoration: none; /* Remove o sublinhado padr√£o de links. */
  font-weight: 600; /* Link em semi-bold. */
  /* `word-break: break-all;` permite que URLs MUITO LONGAS quebrem linha em qualquer
       ponto para evitar que estourem o container. Use com cautela, pois pode quebrar
       palavras de forma estranha se n√£o for uma URL. */
  word-break: break-all;
}
.sourceSection a:hover,
.sourceSection a:focus-visible {
  /* No hover ou foco do link. */
  text-decoration: underline; /* Adiciona sublinhado para feedback. */
  color: var(--color-primary); /* Muda a cor para o verde prim√°rio. */
}

/* --- TEXTO "MUTED" (.textMuted) --- */
/* Classe utilit√°ria para textos que devem ter menos destaque,
     como a mensagem "Informa√ß√£o n√£o dispon√≠vel para esta se√ß√£o." */
.textMuted {
  font-style: italic; /* It√°lico. */
  color: var(--color-text-muted); /* Cinza suave (definido em :root). */
  font-size: 0.95rem; /* Um pouco maior para garantir legibilidade da mensagem. */
  padding: 0.8rem 0; /* Espa√ßamento vertical em volta da mensagem. */
}

/* --- ESTILOS PARA O LIGHTBOX (VISUALIZADOR DE IMAGEM AMPLIADA) --- */
/* `.lightboxBackdrop`: O fundo escuro que cobre toda a tela quando o lightbox est√° ativo. */
.lightboxBackdrop {
  position: fixed; /* Fixo em rela√ß√£o √† janela do navegador, n√£o rola com a p√°gina. */
  top: 0;
  left: 0; /* Cobre desde o canto superior esquerdo. */
  width: 100vw; /* `vw` (viewport width) = 100% da LARGURA da janela do navegador. */
  height: 100vh; /* `vh` (viewport height) = 100% da ALTURA da janela do navegador. */
  background-color: rgba(
    20,
    20,
    20,
    0.92
  ); /* Preto bem escuro com 92% de opacidade. */
  display: flex; /* Usamos Flexbox para centralizar o conte√∫do do lightbox. */
  justify-content: center; /* Centraliza horizontalmente. */
  align-items: center; /* Centraliza verticalmente. */
  z-index: var(
    --z-index-modal,
    1000
  ); /* Z-index MUITO ALTO para garantir que fique
                                            NA FRENTE de todo o resto da p√°gina. */
  padding: 20px; /* Espa√ßamento das bordas da tela para o conte√∫do do lightbox,
                      para que a imagem n√£o cole nas bordas. */
  box-sizing: border-box; /* O padding n√£o aumenta o tamanho total do backdrop. */
  cursor: zoom-out; /* O cursor vira uma lupa de diminuir sobre o fundo,
                         indicando que clicar ali fecha o lightbox. */
}

/* `.lightboxContentWrapper`: O container que segura a imagem e os bot√µes de controle (anterior, pr√≥ximo, fechar).
     Ele fica DENTRO do `.lightboxBackdrop`. */
.lightboxContentWrapper {
  position: relative; /* Necess√°rio para que os bot√µes (com `position: absolute`)
                           se posicionem em rela√ß√£o a este wrapper, e n√£o ao backdrop. */
  display: flex; /* Flexbox para alinhar a imagem e os bot√µes de navega√ß√£o lateral. */
  align-items: center; /* Centraliza verticalmente a imagem e os bot√µes de navega√ß√£o. */
  justify-content: center; /* Centraliza horizontalmente (se a imagem for menor que o espa√ßo). */
  width: 100%; /* Ocupa a largura dispon√≠vel dentro do padding do backdrop. */
  height: 100%; /* Ocupa a altura dispon√≠vel. */
  cursor: default; /* O cursor volta ao normal sobre o conte√∫do, n√£o o de zoom-out do backdrop. */
}

/* `.lightboxImageContainer`: Um container direto para a imagem ampliada.
     √ötil para aplicar sombras ou bordas espec√≠ficas √† imagem sem afetar os bot√µes. */
.lightboxImageContainer {
  display: flex; /* Para centralizar a imagem se ela for menor que o max-width/height. */
  justify-content: center;
  align-items: center;
  max-width: 100%; /* Limita ao tamanho do `.lightboxContentWrapper`. */
  max-height: 100%;
  box-shadow: 0 5px 25px rgba(0, 0, 0, 0.4); /* Sombra na imagem ampliada. */
  background-color: #111; /* Fundo escuro para a imagem, caso ela tenha transpar√™ncia ou
                               n√£o preencha todo o espa√ßo (devido a `object-fit: contain`). */
}

/* `.lightboxImage`: A imagem ampliada em si. */
.lightboxImage {
  display: block; /* Remove espa√ßo extra abaixo da imagem. */

  /* --- RESPONSIVIDADE DA IMAGEM DO LIGHTBOX --- */
  max-width: 100%; /* A imagem NUNCA ser√° mais larga que seu container (`.lightboxImageContainer`). */
  /* A altura m√°xima da imagem √© calculada para ser a altura da viewport MENOS o padding
       que demos ao `.lightboxBackdrop` (20px em cima + 20px em baixo = 40px).
       Isso garante que a imagem (e seus controles) caibam na tela sem scroll vertical. */
  max-height: calc(100vh - 40px);
  object-fit: contain; /* ESSENCIAL AQUI: Garante que a imagem INTEIRA seja vis√≠vel,
                            mantendo sua propor√ß√£o original, DENTRO dos limites de
                            `max-width` e `max-height`. Se a imagem for muito alta,
                            ela encolher√° para caber na altura. Se for muito larga,
                            encolher√° para caber na largura. Pode deixar espa√ßos vazios
                            no container se a propor√ß√£o da imagem for diferente da do espa√ßo. */
  border-radius: 3px; /* Pequeno arredondamento nos cantos da imagem. */
  user-select: none; /* Impede que o usu√°rio selecione a imagem como se fosse texto. */
  -webkit-user-drag: none; /* Impede que a imagem seja "arrastada" em navegadores WebKit (Safari). */
}

/* Estilo base para os bot√µes de navega√ß√£o (Anterior/Pr√≥ximo) e o bot√£o de Fechar do lightbox. */
.lightboxNavButton,
.lightboxCloseButton {
  position: absolute; /* Posicionados em rela√ß√£o ao `.lightboxContentWrapper`. */
  background-color: rgba(
    50,
    50,
    50,
    0.7
  ); /* Fundo cinza escuro semi-transparente. */
  color: white; /* Cor do √≠cone (seta/X) branca. */
  border: 1px solid rgba(255, 255, 255, 0.2); /* Borda branca sutil e transparente. */
  border-radius: 50%; /* Bot√µes circulares. */
  width: 48px; /* Tamanho dos bot√µes (largura). */
  height: 48px; /* Tamanho dos bot√µes (altura). */
  font-size: 2rem; /* Tamanho do √≠cone (caractere de seta ou X). */
  /* `line-height` um pouco menor que `height` pode ajudar a centralizar verticalmente
       caracteres de texto que s√£o usados como √≠cones. Teste para o seu caso. */
  line-height: 46px;
  text-align: center; /* Centraliza o √≠cone horizontalmente. */
  cursor: pointer;
  z-index: 1015; /* Um pouco acima da imagem do lightbox (se ela tivesse z-index). */
  /* Transi√ß√µes para efeitos de hover/focus. */
  transition: background-color 0.2s ease-out, transform 0.15s ease-out,
    opacity 0.2s ease-out;
  opacity: 0.8; /* Levemente transparentes para n√£o serem t√£o intrusivos. */
  outline: none; /* Remove o contorno padr√£o do navegador no foco. */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); /* Sombra sutil nos bot√µes. */
}

/* Efeitos de Hover e Foco para os bot√µes do lightbox. */
.lightboxNavButton:hover,
.lightboxCloseButton:hover,
.lightboxNavButton:focus-visible,
.lightboxCloseButton:focus-visible {
  background-color: rgba(20, 20, 20, 0.9); /* Fundo fica mais escuro e opaco. */
  opacity: 1; /* Totalmente opaco. */
  transform: scale(1.08); /* Aumenta um pouco o tamanho do bot√£o. */
  border-color: rgba(
    255,
    255,
    255,
    0.4
  ); /* Borda fica um pouco mais vis√≠vel. */
}
/* Estilo de foco vis√≠vel espec√≠fico para acessibilidade. */
.lightboxNavButton:focus-visible,
.lightboxCloseButton:focus-visible {
  outline: 2px solid var(--color-secondary-light, #fab179); /* Contorno laranja claro.
                                                                 Defina `--color-secondary-light` em `:root`. */
  outline-offset: 2px;
}

/* Posi√ß√£o do bot√£o "Anterior" (seta para esquerda). */
.lightboxPrevButton {
  left: 25px; /* Dist√¢ncia da borda ESQUERDA do `.lightboxContentWrapper`. */
  top: 50%; /* Posiciona o TOPO do bot√£o no meio vertical do wrapper. */
  transform: translateY(
    -50%
  ); /* TRUQUE CSS: Move o bot√£o PARA CIMA por METADE
                                     da sua pr√≥pria altura, centralizando-o verticalmente
                                     de forma perfeita, independentemente do seu tamanho. */
}
/* Posi√ß√£o do bot√£o "Pr√≥ximo" (seta para direita). */
.lightboxNextButton {
  right: 25px; /* Dist√¢ncia da borda DIREITA. */
  top: 50%;
  transform: translateY(-50%); /* Mesmo truque de centraliza√ß√£o vertical. */
}
/* Posi√ß√£o e tamanho do bot√£o "Fechar" (X). */
.lightboxCloseButton {
  top: 25px; /* Dist√¢ncia do TOPO. */
  right: 25px; /* Dist√¢ncia da DIREITA. */
  /* Opcional: Bot√£o de fechar um pouco menor que os de navega√ß√£o. */
  width: 42px;
  height: 42px;
  line-height: 40px;
  font-size: 1.7rem;
}

/* --- AJUSTES RESPONSIVOS COM MEDIA QUERIES --- */
/* Lembre-se: "Mobile First" significa que os estilos acima s√£o a base (para mobile).
     Agora, usamos `min-width` para adicionar ou modificar estilos para telas MAIORES. */

/* Para tablets e desktops (largura m√≠nima de 768 pixels). */
@media (min-width: 768px) {
  /* Aumentamos o padding do container principal da p√°gina de detalhes. */
  .detailContainer {
    padding: 2rem 2.5rem;
  }
  /* Aumentamos os tamanhos das fontes dos t√≠tulos. */
  .animalNameTitle {
    font-size: 2.6rem;
  }
  .scientificNameDetail {
    font-size: 1.5rem;
  }
  .extinctionBanner h2 {
    font-size: 1.25rem;
  }
  .scaleLevel {
    /* Indicadores da escala de extin√ß√£o um pouco maiores. */
    font-size: 0.8rem;
    padding: 0.45rem 0.9rem;
    min-width: 45px;
  }
  .sectionTitle {
    /* T√≠tulos de se√ß√£o (Habitat, Ecologia) maiores. */
    font-size: 1.75rem;
  }
  .sectionSubtitle {
    /* Subt√≠tulos (H3) maiores. */
    font-size: 1.25rem;
  }
  .listItem {
    /* Itens de lista com mais padding e fonte maior. */
    font-size: 1rem;
    padding: 0.9rem 1.3rem;
  }

  /* Imagens da Galeria em Telas Maiores: */
  .galleryImage {
    /* O layout do grid (`.galleryContainer`) j√° cuida do tamanho das colunas.
         `max-width: 100%` e `height: auto` (ou `aspect-ratio`) no `.galleryImage` base
         j√° garantem que ela caiba na c√©lula do grid.
         Se quis√©ssemos limitar o qu√£o grande uma imagem da galeria pode ficar,
         mesmo que a c√©lula do grid seja muito larga, poder√≠amos adicionar um `max-width` aqui:
         Exemplo: max-width: 300px;
         Mas, geralmente, deixar o grid controlar √© suficiente. */
  }

  /* Bot√µes do Lightbox Maiores em Telas Maiores: */
  .lightboxNavButton,
  .lightboxCloseButton {
    width: 52px;
    height: 52px;
    line-height: 50px;
    font-size: 2.2rem;
  }
  .lightboxPrevButton {
    left: 35px;
  } /* Um pouco mais afastados da borda. */
  .lightboxNextButton {
    right: 35px;
  }
  .lightboxCloseButton {
    top: 35px;
    right: 35px;
    width: 46px;
    height: 46px;
    line-height: 44px;
    font-size: 1.8rem; /* Fechar um pouco menor. */
  }
} /* Fim da media query para min-width: 768px */

/* Para telas grandes (largura m√≠nima de 1024 pixels). */
@media (min-width: 1024px) {
  /* Tazo pode ser um pouco maior. */
  .headerTazoContainer {
    max-width: 260px;
    height: 260px;
  }
  /* T√≠tulos ainda maiores. */
  .animalNameTitle {
    font-size: 3rem;
  }
  .scientificNameDetail {
    font-size: 1.7rem;
  }

  /* Opcional: Se o App.js n√£o controlar a largura m√°xima da p√°gina, poder√≠amos fazer aqui:
    .detailContainer {
      max-width: 1024px;
      margin-left: auto; // Se max-width for usado, precisa centralizar.
      margin-right: auto;
    }
    */
} /* Fim da media query para min-width: 1024px */

/* Ajustes para telas MUITO PEQUENAS (largura m√°xima de 480 pixels).
     Aqui, priorizamos economizar cada pixel e garantir que nada estoure! */
@media (max-width: 480px) {
  /* Bot√µes do Lightbox menores e mais pr√≥ximos das bordas. */
  .lightboxNavButton {
    width: 40px;
    height: 40px;
    font-size: 1.6rem;
    line-height: 38px;
  }
  .lightboxPrevButton {
    left: 8px;
  }
  .lightboxNextButton {
    right: 8px;
  }
  .lightboxCloseButton {
    top: 8px;
    right: 8px;
    width: 34px;
    height: 34px;
    font-size: 1.5rem;
    line-height: 32px;
  }
  .lightboxBackdrop {
    padding: 8px;
  } /* Menos padding no fundo do lightbox. */

  /* Container principal da p√°gina de detalhes com menos padding. */
  .detailContainer {
    padding: 1rem 0.8rem;
  }
  /* T√≠tulos e textos menores. */
  .sectionTitle {
    font-size: 1.25rem;
  }
  .animalNameTitle {
    font-size: 1.8rem;
  }
  .scientificNameDetail {
    font-size: 1.05rem;
  }
  .headerTazoContainer {
    max-width: 180px;
    height: 180px;
    margin-bottom: 1.2rem;
  } /* Tazo menor. */

  /* --- CORRE√á√ÉO PARA IMAGENS DA GALERIA EM TELAS MUITO PEQUENAS --- */
  /* ALUNOS: Aqui est√° a corre√ß√£o crucial para evitar que as imagens da galeria
       fiquem mais largas que a tela em dispositivos muito estreitos. */
  .galleryContainer {
    /* For√ßa a galeria a ter UMA √öNICA COLUNA.
         `1fr` significa que a coluna ocupar√° toda a largura dispon√≠vel do container da galeria. */
    grid-template-columns: 1fr;
    gap: 1rem; /* Gap (espa√ßo) menor entre as imagens na coluna √∫nica. */
  }
  .galleryImage {
    /* Remove qualquer `aspect-ratio` fixo que possa ter sido definido em estilos base
         ou em outras media queries. Isso permite que a imagem use sua propor√ß√£o natural. */
    aspect-ratio: unset;

    /* Garante que a imagem ocupe 100% da largura da c√©lula do grid (que agora √© 1fr). */
    width: 100%;
    /* Redundante se width: 100% e o container estiver correto, mas seguro.
         Garante que a imagem n√£o seja renderizada maior que seu container. */
    max-width: 100%;

    /* ESSENCIAL: A altura se ajusta automaticamente para manter a propor√ß√£o da imagem. */
    height: auto;

    /* `box-sizing: border-box;` j√° est√° no estilo base de `.galleryImage`,
         o que √© bom para garantir que paddings/borders (se existissem)
         n√£o aumentassem a largura efetiva. */

    /* Opcional: Se as imagens ficarem muito "altas" em uma √∫nica coluna,
         voc√™ poderia limitar a altura m√°xima delas:
      max-height: 280px;
      object-fit: contain; // Se usar max-height, 'contain' pode ser melhor para ver a imagem inteira.
      */
  }
} /* Fim da media query para max-width: 480px */

/* ===================================================================================
     NOTAS FINAIS PARA OS ALUNOS (REFOR√áANDO OS CONCEITOS MAIS IMPORTANTES):
  
     - **Imagens Responsivas (`max-width: 100%;` e `height: auto`)**:
       Esta √© a t√©cnica fundamental para garantir que suas imagens se adaptem a diferentes
       larguras de tela sem quebrar o layout ou ficarem distorcidas. A imagem nunca
       ser√° mais larga que seu cont√™iner pai, e sua altura se ajustar√° para manter
       a propor√ß√£o original.
  
     - **`object-fit` para Controle Fino de Imagens**:
       Quando voc√™ tem um cont√™iner com dimens√µes espec√≠ficas (seja por altura/largura fixas
       ou por `aspect-ratio`) e a imagem n√£o tem a mesma propor√ß√£o, `object-fit` decide
       como a imagem deve se comportar:
       - `cover`: Preenche o cont√™iner, mantendo a propor√ß√£o, mas CORTA a imagem se necess√°rio.
                  Bom para imagens de fundo ou quando o preenchimento visual √© mais importante
                  que mostrar a imagem inteira.
       - `contain`: Mostra a imagem INTEIRA dentro do cont√™iner, mantendo a propor√ß√£o.
                    Pode deixar ESPA√áOS VAZIOS se as propor√ß√µes do cont√™iner e da imagem
                    forem diferentes. √ìtimo para logotipos ou quando voc√™ precisa que
                    toda a imagem seja vis√≠vel.
       - `fill`: Estica a imagem para preencher o cont√™iner, IGNORANDO a propor√ß√£o.
                 (Geralmente resulta em imagens distorcidas e deve ser evitado na maioria dos casos).
       - `scale-down`: Compara o resultado de `contain` e o tamanho original da imagem (`none`)
                       e escolhe o MENOR dos dois. √ötil se voc√™ n√£o quer que imagens pequenas
                       sejam ampliadas.
       - `none`: Mostra a imagem em seu tamanho original, cortando se for maior que o cont√™iner.
  
     - **CSS Grid para Layouts de Galeria (`display: grid`)**:
       CSS Grid √© incrivelmente poderoso para criar layouts complexos em duas dimens√µes
       (linhas e colunas). Para galerias de imagens, a combina√ß√£o de
       `grid-template-columns: repeat(auto-fit, minmax(TAMANHO_MINIMO_ITEM, 1fr));`
       √© uma forma moderna e elegante de criar um layout que se ajusta automaticamente,
       mostrando quantas colunas de itens couberem na tela, cada uma com um tamanho
       m√≠nimo, mas se expandindo para preencher o espa√ßo se houver.
       Para a corre√ß√£o em telas muito pequenas, mudamos para `grid-template-columns: 1fr;`
       para for√ßar uma √∫nica coluna responsiva.
  
     - **Media Queries para Design Adaptativo**:
       O uso de `@media (max-width: ...)` e `@media (min-width: ...)` √© o que permite
       que seu site se adapte e tenha uma boa apar√™ncia em uma vasta gama de dispositivos,
       desde celulares pequenos at√© monitores grandes. Testar em diferentes "breakpoints"
       (os valores de largura nas media queries) √© crucial.
  
     - **"Mobile First" vs. "Desktop First"**:
       - "Mobile First": Voc√™ escreve seus estilos CSS base pensando em telas pequenas primeiro.
         Depois, usa `@media (min-width: ...)` para adicionar ou modificar estilos para
         telas progressivamente maiores. Muitos desenvolvedores preferem essa abordagem
         porque for√ßa a pensar no essencial e geralmente leva a um CSS mais limpo.
       - "Desktop First": Voc√™ estiliza para telas grandes primeiro e depois usa
         `@media (max-width: ...)` para "consertar" ou adaptar para telas menores.
         Pode ser mais intuitivo para alguns no in√≠cio, mas √†s vezes pode levar a mais
         sobrescritas de CSS.
       Ambas s√£o v√°lidas, mas "Mobile First" √© frequentemente recomendada como uma boa pr√°tica moderna.
  
     - **Acessibilidade (A11y) Sempre em Mente**:
       - Contraste de Cores: Texto deve ser leg√≠vel sobre o fundo.
       - Tamanho do Texto: Evite fontes muito pequenas, especialmente em informa√ß√µes importantes.
       - Feedback de Foco (`:focus-visible`, `outline`): Essencial para usu√°rios que navegam
         pelo teclado.
       - HTML Sem√¢ntico (usar `<article>`, `<header>`, `<nav>`, `<footer>`, `<button>` corretamente):
         Ajuda leitores de tela e a indexa√ß√£o por mecanismos de busca.
       - Atributos ARIA (`aria-label`, `aria-hidden`, `role`, `aria-modal`): Fornecem informa√ß√µes
         adicionais para tecnologias assistivas.
  
     Lembrem-se, a melhor forma de aprender CSS √© praticando, experimentando e usando
     as Ferramentas de Desenvolvedor do navegador para inspecionar e ver como tudo funciona!
     N√£o tenham medo de quebrar coisas e depois consert√°-las ‚Äì √© assim que se aprende! üòä
     =================================================================================== */
